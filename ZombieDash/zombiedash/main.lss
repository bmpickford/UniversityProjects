
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00002182  00002216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  008001c0  008001c0  000022d6  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  000022d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ca  00000000  00000000  00002596  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000293a  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001193  00000000  00000000  0000539a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002064  00000000  00000000  0000652d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00008594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000702  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018ee  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000a984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
		
	//Ensure to enable global interrupts as well.
	sei();
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
	unsigned char i;
	for (i = x1; i <= x2; i++){
		set_pixel(i, y, 1);
	}
}
void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
       2:	00 00       	nop
	LCDWrite(LCD_C, 0x40); // Reset row to 0
	LCDWrite(LCD_C, 0x80); // Reset column to 0
}

// Simply blank out the memory of the LCD to clear the screen
void LCDClear(void) {
       4:	5f c1       	rjmp	.+702    	; 0x2c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c1       	rjmp	.+698    	; 0x2c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c1       	rjmp	.+694    	; 0x2c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c1       	rjmp	.+690    	; 0x2c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c1       	rjmp	.+686    	; 0x2c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c1       	rjmp	.+682    	; 0x2c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c1       	rjmp	.+674    	; 0x2c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c1       	rjmp	.+670    	; 0x2c4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c1       	rjmp	.+666    	; 0x2c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4b c1       	rjmp	.+662    	; 0x2c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	49 c1       	rjmp	.+658    	; 0x2c4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c1       	rjmp	.+654    	; 0x2c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c1       	rjmp	.+650    	; 0x2c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c1       	rjmp	.+646    	; 0x2c4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c1       	rjmp	.+642    	; 0x2c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c1       	rjmp	.+638    	; 0x2c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	3d c1       	rjmp	.+634    	; 0x2c4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3b c1       	rjmp	.+630    	; 0x2c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	39 c1       	rjmp	.+626    	; 0x2c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c1       	rjmp	.+622    	; 0x2c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c1       	rjmp	.+618    	; 0x2c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cf c2       	rjmp	.+1438   	; 0x5fc <__vector_23>
      5e:	00 00       	nop
      60:	31 c1       	rjmp	.+610    	; 0x2c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c1       	rjmp	.+606    	; 0x2c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	2d c1       	rjmp	.+602    	; 0x2c4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2b c1       	rjmp	.+598    	; 0x2c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	29 c1       	rjmp	.+594    	; 0x2c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	27 c1       	rjmp	.+590    	; 0x2c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	25 c1       	rjmp	.+586    	; 0x2c4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	23 c1       	rjmp	.+582    	; 0x2c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	21 c1       	rjmp	.+578    	; 0x2c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	1f c1       	rjmp	.+574    	; 0x2c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	1d c1       	rjmp	.+570    	; 0x2c4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1b c1       	rjmp	.+566    	; 0x2c4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	19 c1       	rjmp	.+562    	; 0x2c4 <__bad_interrupt>
      92:	00 00       	nop
      94:	17 c1       	rjmp	.+558    	; 0x2c4 <__bad_interrupt>
      96:	00 00       	nop
      98:	15 c1       	rjmp	.+554    	; 0x2c4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	13 c1       	rjmp	.+550    	; 0x2c4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	11 c1       	rjmp	.+546    	; 0x2c4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0f c1       	rjmp	.+542    	; 0x2c4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0d c1       	rjmp	.+538    	; 0x2c4 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e2 e8       	ldi	r30, 0x82	; 130
     2a0:	f1 e2       	ldi	r31, 0x21	; 33
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a0 3c       	cpi	r26, 0xC0	; 192
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	13 e0       	ldi	r17, 0x03	; 3
     2b0:	a0 ec       	ldi	r26, 0xC0	; 192
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	ab 3d       	cpi	r26, 0xDB	; 219
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	3a d4       	rcall	.+2164   	; 0xb34 <main>
     2c0:	0c 94 bf 10 	jmp	0x217e	; 0x217e <_exit>

000002c4 <__bad_interrupt>:
     2c4:	9d ce       	rjmp	.-710    	; 0x0 <__vectors>

000002c6 <TimerInit>:
bool has_grenade = false;
Sprite gren;


void TimerInit(void) {
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     2c6:	84 b5       	in	r24, 0x24	; 36
     2c8:	8d 7f       	andi	r24, 0xFD	; 253
     2ca:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     2cc:	85 b5       	in	r24, 0x25	; 37
     2ce:	87 7f       	andi	r24, 0xF7	; 247
     2d0:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS02)|(1<<CS00);
     2d2:	85 b5       	in	r24, 0x25	; 37
     2d4:	85 60       	ori	r24, 0x05	; 5
     2d6:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));	
     2d8:	85 b5       	in	r24, 0x25	; 37
     2da:	8d 7f       	andi	r24, 0xFD	; 253
     2dc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
     2de:	ee e6       	ldi	r30, 0x6E	; 110
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	80 83       	st	Z, r24
	sei();
     2e8:	78 94       	sei
}
     2ea:	08 95       	ret

000002ec <increase_score>:
		blow_up = false;
		has_grenade = false;
	}
}
void increase_score(int increase){
	score += increase;
     2ec:	20 91 c0 01 	lds	r18, 0x01C0
     2f0:	30 91 c1 01 	lds	r19, 0x01C1
     2f4:	28 0f       	add	r18, r24
     2f6:	39 1f       	adc	r19, r25
     2f8:	30 93 c1 01 	sts	0x01C1, r19
     2fc:	20 93 c0 01 	sts	0x01C0, r18
}
     300:	08 95       	ret

00000302 <check_death>:
bool check_death(Sprite *zombie[num_z], Sprite *player){
     302:	7f 92       	push	r7
     304:	8f 92       	push	r8
     306:	9f 92       	push	r9
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	5b 01       	movw	r10, r22
	bool dead = false;
	
	for (int i=0; i < num_z; i++){
     31e:	80 90 08 01 	lds	r8, 0x0108
     322:	90 90 09 01 	lds	r9, 0x0109
     326:	c0 90 06 01 	lds	r12, 0x0106
     32a:	d0 90 07 01 	lds	r13, 0x0107
     32e:	8c 01       	movw	r16, r24
     330:	77 24       	eor	r7, r7
     332:	c0 e0       	ldi	r28, 0x00	; 0
     334:	d0 e0       	ldi	r29, 0x00	; 0
     336:	31 c0       	rjmp	.+98     	; 0x39a <check_death+0x98>
			if ((abs(player->x - zombie[i]->x) < 3) && ((abs(player->y - zombie[i]->y)) < 3)){
     338:	f8 01       	movw	r30, r16
     33a:	e0 80       	ld	r14, Z
     33c:	f1 80       	ldd	r15, Z+1	; 0x01
     33e:	f5 01       	movw	r30, r10
     340:	60 81       	ld	r22, Z
     342:	71 81       	ldd	r23, Z+1	; 0x01
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	93 81       	ldd	r25, Z+3	; 0x03
     348:	f7 01       	movw	r30, r14
     34a:	20 81       	ld	r18, Z
     34c:	31 81       	ldd	r19, Z+1	; 0x01
     34e:	42 81       	ldd	r20, Z+2	; 0x02
     350:	53 81       	ldd	r21, Z+3	; 0x03
     352:	0e 94 3d 0c 	call	0x187a	; 0x187a <__subsf3>
     356:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fixsfsi>
     35a:	6e 5f       	subi	r22, 0xFE	; 254
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	65 30       	cpi	r22, 0x05	; 5
     360:	71 05       	cpc	r23, r1
     362:	c0 f4       	brcc	.+48     	; 0x394 <check_death+0x92>
     364:	f5 01       	movw	r30, r10
     366:	64 81       	ldd	r22, Z+4	; 0x04
     368:	75 81       	ldd	r23, Z+5	; 0x05
     36a:	86 81       	ldd	r24, Z+6	; 0x06
     36c:	97 81       	ldd	r25, Z+7	; 0x07
     36e:	f7 01       	movw	r30, r14
     370:	24 81       	ldd	r18, Z+4	; 0x04
     372:	35 81       	ldd	r19, Z+5	; 0x05
     374:	46 81       	ldd	r20, Z+6	; 0x06
     376:	57 81       	ldd	r21, Z+7	; 0x07
     378:	0e 94 3d 0c 	call	0x187a	; 0x187a <__subsf3>
     37c:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fixsfsi>
     380:	6e 5f       	subi	r22, 0xFE	; 254
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	65 30       	cpi	r22, 0x05	; 5
     386:	71 05       	cpc	r23, r1
     388:	28 f4       	brcc	.+10     	; 0x394 <check_death+0x92>
				dead = true;
				lives--;
     38a:	08 94       	sec
     38c:	c1 08       	sbc	r12, r1
     38e:	d1 08       	sbc	r13, r1
     390:	77 24       	eor	r7, r7
     392:	73 94       	inc	r7
	score += increase;
}
bool check_death(Sprite *zombie[num_z], Sprite *player){
	bool dead = false;
	
	for (int i=0; i < num_z; i++){
     394:	21 96       	adiw	r28, 0x01	; 1
     396:	0e 5f       	subi	r16, 0xFE	; 254
     398:	1f 4f       	sbci	r17, 0xFF	; 255
     39a:	c8 15       	cp	r28, r8
     39c:	d9 05       	cpc	r29, r9
     39e:	64 f2       	brlt	.-104    	; 0x338 <check_death+0x36>
     3a0:	d0 92 07 01 	sts	0x0107, r13
     3a4:	c0 92 06 01 	sts	0x0106, r12
				lives--;
		}
	}
	
	return dead;
}
     3a8:	87 2d       	mov	r24, r7
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	9f 90       	pop	r9
     3c0:	8f 90       	pop	r8
     3c2:	7f 90       	pop	r7
     3c4:	08 95       	ret

000003c6 <reset>:

	draw_character('0'+score_2,LCD_X + 1, 30);
	draw_character('0'+score,LCD_X + 7, 30);
}

void reset(Sprite *zombie[num_z], Sprite *player, int reset){
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	5c 01       	movw	r10, r24
     3e0:	fb 01       	movw	r30, r22
	player->x = LCD_X / 2 + 3;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	a8 e1       	ldi	r26, 0x18	; 24
     3e8:	b2 e4       	ldi	r27, 0x42	; 66
     3ea:	80 83       	st	Z, r24
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	a2 83       	std	Z+2, r26	; 0x02
     3f0:	b3 83       	std	Z+3, r27	; 0x03
	player->y = LCD_Y / 2 + 3;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a8 ed       	ldi	r26, 0xD8	; 216
     3f8:	b1 e4       	ldi	r27, 0x41	; 65
     3fa:	84 83       	std	Z+4, r24	; 0x04
     3fc:	95 83       	std	Z+5, r25	; 0x05
     3fe:	a6 83       	std	Z+6, r26	; 0x06
     400:	b7 83       	std	Z+7, r27	; 0x07
	int xrndm, xrndm1, xrndm2;
	int yrndm, yrndm1, yrndm2;
	if (reset == 0){
     402:	45 2b       	or	r20, r21
     404:	09 f0       	breq	.+2      	; 0x408 <reset+0x42>
     406:	94 c0       	rjmp	.+296    	; 0x530 <reset+0x16a>
     408:	45 01       	movw	r8, r10
     40a:	cc 24       	eor	r12, r12
     40c:	dd 24       	eor	r13, r13
     40e:	4f c0       	rjmp	.+158    	; 0x4ae <reset+0xe8>
		for (int i = 0; i < zombie_count; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
     410:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     414:	69 e1       	ldi	r22, 0x19	; 25
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     41c:	8c 01       	movw	r16, r24
     41e:	0f 5f       	subi	r16, 0xFF	; 255
     420:	1f 4f       	sbci	r17, 0xFF	; 255
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
     422:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     426:	6e e0       	ldi	r22, 0x0E	; 14
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     42e:	7c 01       	movw	r14, r24
     430:	08 94       	sec
     432:	e1 1c       	adc	r14, r1
     434:	f1 1c       	adc	r15, r1
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     436:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     43a:	ec 01       	movw	r28, r24
			yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     43c:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     440:	fc 01       	movw	r30, r24
			if (xrndm1 % 2 == 0){
     442:	00 fd       	sbrc	r16, 0
     444:	02 c0       	rjmp	.+4      	; 0x44a <reset+0x84>
     446:	98 01       	movw	r18, r16
     448:	08 c0       	rjmp	.+16     	; 0x45a <reset+0x94>
	int yrndm, yrndm1, yrndm2;
	if (reset == 0){
		for (int i = 0; i < zombie_count; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     44a:	ce 01       	movw	r24, r28
     44c:	64 e1       	ldi	r22, 0x14	; 20
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     454:	9c 01       	movw	r18, r24
     456:	23 5d       	subi	r18, 0xD3	; 211
     458:	3f 4f       	sbci	r19, 0xFF	; 255
				xrndm = xrndm1;
			}
			else {
				xrndm = xrndm2;
			}
			if (yrndm1 % 2 == 0){
     45a:	e0 fc       	sbrc	r14, 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <reset+0x9c>
     45e:	e7 01       	movw	r28, r14
     460:	07 c0       	rjmp	.+14     	; 0x470 <reset+0xaa>
	if (reset == 0){
		for (int i = 0; i < zombie_count; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
			yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     462:	cf 01       	movw	r24, r30
     464:	69 e0       	ldi	r22, 0x09	; 9
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     46c:	ec 01       	movw	r28, r24
     46e:	a2 96       	adiw	r28, 0x22	; 34
				yrndm = yrndm1;
			}
			else {
				yrndm = yrndm2;
			}
			zombie[i]->x = xrndm;
     470:	f4 01       	movw	r30, r8
     472:	01 91       	ld	r16, Z+
     474:	11 91       	ld	r17, Z+
     476:	4f 01       	movw	r8, r30
     478:	b9 01       	movw	r22, r18
     47a:	88 27       	eor	r24, r24
     47c:	77 fd       	sbrc	r23, 7
     47e:	80 95       	com	r24
     480:	98 2f       	mov	r25, r24
     482:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatsisf>
     486:	f8 01       	movw	r30, r16
     488:	60 83       	st	Z, r22
     48a:	71 83       	std	Z+1, r23	; 0x01
     48c:	82 83       	std	Z+2, r24	; 0x02
     48e:	93 83       	std	Z+3, r25	; 0x03
			zombie[i]->y = yrndm;
     490:	be 01       	movw	r22, r28
     492:	88 27       	eor	r24, r24
     494:	77 fd       	sbrc	r23, 7
     496:	80 95       	com	r24
     498:	98 2f       	mov	r25, r24
     49a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatsisf>
     49e:	f8 01       	movw	r30, r16
     4a0:	64 83       	std	Z+4, r22	; 0x04
     4a2:	75 83       	std	Z+5, r23	; 0x05
     4a4:	86 83       	std	Z+6, r24	; 0x06
     4a6:	97 83       	std	Z+7, r25	; 0x07
	player->x = LCD_X / 2 + 3;
	player->y = LCD_Y / 2 + 3;
	int xrndm, xrndm1, xrndm2;
	int yrndm, yrndm1, yrndm2;
	if (reset == 0){
		for (int i = 0; i < zombie_count; i++){
     4a8:	08 94       	sec
     4aa:	c1 1c       	adc	r12, r1
     4ac:	d1 1c       	adc	r13, r1
     4ae:	80 91 0a 01 	lds	r24, 0x010A
     4b2:	90 91 0b 01 	lds	r25, 0x010B
     4b6:	c8 16       	cp	r12, r24
     4b8:	d9 06       	cpc	r13, r25
     4ba:	0c f4       	brge	.+2      	; 0x4be <reset+0xf8>
     4bc:	a9 cf       	rjmp	.-174    	; 0x410 <reset+0x4a>
				yrndm = yrndm2;
			}
			zombie[i]->x = xrndm;
			zombie[i]->y = yrndm;
		}
		for (int ii = zombie_count; ii < num_z; ii++){
     4be:	60 91 08 01 	lds	r22, 0x0108
     4c2:	70 91 09 01 	lds	r23, 0x0109
     4c6:	dc 01       	movw	r26, r24
     4c8:	aa 0f       	add	r26, r26
     4ca:	bb 1f       	adc	r27, r27
     4cc:	aa 0d       	add	r26, r10
     4ce:	bb 1d       	adc	r27, r11
			zombie[ii]->x = -1;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	af 2e       	mov	r10, r31
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	bf 2e       	mov	r11, r31
     4da:	f0 e8       	ldi	r31, 0x80	; 128
     4dc:	cf 2e       	mov	r12, r31
     4de:	ff eb       	ldi	r31, 0xBF	; 191
     4e0:	df 2e       	mov	r13, r31
     4e2:	f0 2d       	mov	r31, r0
			zombie[ii]->y = 50;
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ef 2e       	mov	r14, r31
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	ff 2e       	mov	r15, r31
     4ee:	f8 e4       	ldi	r31, 0x48	; 72
     4f0:	0f 2f       	mov	r16, r31
     4f2:	f2 e4       	ldi	r31, 0x42	; 66
     4f4:	1f 2f       	mov	r17, r31
     4f6:	f0 2d       	mov	r31, r0
			zombie[ii]->dx = 0;
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	13 c0       	rjmp	.+38     	; 0x528 <reset+0x162>
			}
			zombie[i]->x = xrndm;
			zombie[i]->y = yrndm;
		}
		for (int ii = zombie_count; ii < num_z; ii++){
			zombie[ii]->x = -1;
     502:	ed 91       	ld	r30, X+
     504:	fd 91       	ld	r31, X+
     506:	a0 82       	st	Z, r10
     508:	b1 82       	std	Z+1, r11	; 0x01
     50a:	c2 82       	std	Z+2, r12	; 0x02
     50c:	d3 82       	std	Z+3, r13	; 0x03
			zombie[ii]->y = 50;
     50e:	e4 82       	std	Z+4, r14	; 0x04
     510:	f5 82       	std	Z+5, r15	; 0x05
     512:	06 83       	std	Z+6, r16	; 0x06
     514:	17 83       	std	Z+7, r17	; 0x07
			zombie[ii]->dx = 0;
     516:	25 87       	std	Z+13, r18	; 0x0d
     518:	36 87       	std	Z+14, r19	; 0x0e
     51a:	47 87       	std	Z+15, r20	; 0x0f
     51c:	50 8b       	std	Z+16, r21	; 0x10
			zombie[ii]->dy = 0;
     51e:	21 8b       	std	Z+17, r18	; 0x11
     520:	32 8b       	std	Z+18, r19	; 0x12
     522:	43 8b       	std	Z+19, r20	; 0x13
     524:	54 8b       	std	Z+20, r21	; 0x14
				yrndm = yrndm2;
			}
			zombie[i]->x = xrndm;
			zombie[i]->y = yrndm;
		}
		for (int ii = zombie_count; ii < num_z; ii++){
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	86 17       	cp	r24, r22
     52a:	97 07       	cpc	r25, r23
     52c:	54 f3       	brlt	.-44     	; 0x502 <reset+0x13c>
     52e:	59 c0       	rjmp	.+178    	; 0x5e2 <reset+0x21c>
     530:	cc 24       	eor	r12, r12
     532:	dd 24       	eor	r13, r13
			else {
				yrndm = yrndm2;
			}
			zombie[i]->x = xrndm;
			zombie[i]->y = yrndm;
			zombie[i]->is_visible = 1;
     534:	99 24       	eor	r9, r9
     536:	93 94       	inc	r9
			zombie[ii]->dy = 0;
		}
	}
	else {
		for (int i = 0; i < 8; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
     538:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     53c:	69 e1       	ldi	r22, 0x19	; 25
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     544:	8c 01       	movw	r16, r24
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
     54a:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     54e:	6e e0       	ldi	r22, 0x0E	; 14
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     556:	7c 01       	movw	r14, r24
     558:	08 94       	sec
     55a:	e1 1c       	adc	r14, r1
     55c:	f1 1c       	adc	r15, r1
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     55e:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     562:	ec 01       	movw	r28, r24
			yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     564:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     568:	fc 01       	movw	r30, r24
			if (xrndm1 % 2 == 0){
     56a:	00 fd       	sbrc	r16, 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <reset+0x1ac>
     56e:	98 01       	movw	r18, r16
     570:	08 c0       	rjmp	.+16     	; 0x582 <reset+0x1bc>
	}
	else {
		for (int i = 0; i < 8; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     572:	ce 01       	movw	r24, r28
     574:	64 e1       	ldi	r22, 0x14	; 20
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     57c:	9c 01       	movw	r18, r24
     57e:	23 5d       	subi	r18, 0xD3	; 211
     580:	3f 4f       	sbci	r19, 0xFF	; 255
				xrndm = xrndm1;
			}
			else {
				xrndm = xrndm2;
			}
			if (yrndm1 % 2 == 0){
     582:	e0 fc       	sbrc	r14, 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <reset+0x1c4>
     586:	e7 01       	movw	r28, r14
     588:	07 c0       	rjmp	.+14     	; 0x598 <reset+0x1d2>
	else {
		for (int i = 0; i < 8; i++){
			xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
			yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
			xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
			yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     58a:	cf 01       	movw	r24, r30
     58c:	69 e0       	ldi	r22, 0x09	; 9
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     594:	ec 01       	movw	r28, r24
     596:	a2 96       	adiw	r28, 0x22	; 34
				yrndm = yrndm1;
			}
			else {
				yrndm = yrndm2;
			}
			zombie[i]->x = xrndm;
     598:	f5 01       	movw	r30, r10
     59a:	01 91       	ld	r16, Z+
     59c:	11 91       	ld	r17, Z+
     59e:	5f 01       	movw	r10, r30
     5a0:	b9 01       	movw	r22, r18
     5a2:	88 27       	eor	r24, r24
     5a4:	77 fd       	sbrc	r23, 7
     5a6:	80 95       	com	r24
     5a8:	98 2f       	mov	r25, r24
     5aa:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatsisf>
     5ae:	f8 01       	movw	r30, r16
     5b0:	60 83       	st	Z, r22
     5b2:	71 83       	std	Z+1, r23	; 0x01
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	93 83       	std	Z+3, r25	; 0x03
			zombie[i]->y = yrndm;
     5b8:	be 01       	movw	r22, r28
     5ba:	88 27       	eor	r24, r24
     5bc:	77 fd       	sbrc	r23, 7
     5be:	80 95       	com	r24
     5c0:	98 2f       	mov	r25, r24
     5c2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__floatsisf>
     5c6:	f8 01       	movw	r30, r16
     5c8:	64 83       	std	Z+4, r22	; 0x04
     5ca:	75 83       	std	Z+5, r23	; 0x05
     5cc:	86 83       	std	Z+6, r24	; 0x06
     5ce:	97 83       	std	Z+7, r25	; 0x07
			zombie[i]->is_visible = 1;
     5d0:	92 86       	std	Z+10, r9	; 0x0a
			zombie[ii]->dx = 0;
			zombie[ii]->dy = 0;
		}
	}
	else {
		for (int i = 0; i < 8; i++){
     5d2:	08 94       	sec
     5d4:	c1 1c       	adc	r12, r1
     5d6:	d1 1c       	adc	r13, r1
     5d8:	f8 e0       	ldi	r31, 0x08	; 8
     5da:	cf 16       	cp	r12, r31
     5dc:	d1 04       	cpc	r13, r1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <reset+0x21c>
     5e0:	ab cf       	rjmp	.-170    	; 0x538 <reset+0x172>
			zombie[i]->is_visible = 1;
		}

	}
	
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	08 95       	ret

000005fc <__vector_23>:
	TCCR0B &= ~((1<<CS01));	
	TIMSK0 |= (1<<TOIE0);
	sei();
}

ISR(TIMER0_OVF_vect) {
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	2f 93       	push	r18
     608:	3f 93       	push	r19
     60a:	4f 93       	push	r20
     60c:	5f 93       	push	r21
     60e:	6f 93       	push	r22
     610:	7f 93       	push	r23
     612:	8f 93       	push	r24
     614:	9f 93       	push	r25
     616:	af 93       	push	r26
     618:	bf 93       	push	r27
     61a:	ef 93       	push	r30
     61c:	ff 93       	push	r31
	TIFR0 |= (1<<TOV0);
     61e:	a8 9a       	sbi	0x15, 0	; 21
	clock++;
     620:	80 91 c6 01 	lds	r24, 0x01C6
     624:	90 91 c7 01 	lds	r25, 0x01C7
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 c7 01 	sts	0x01C7, r25
     62e:	80 93 c6 01 	sts	0x01C6, r24

	if(clock >= SCORE_COUNT) {
     632:	80 91 c6 01 	lds	r24, 0x01C6
     636:	90 91 c7 01 	lds	r25, 0x01C7
     63a:	86 39       	cpi	r24, 0x96	; 150
     63c:	91 05       	cpc	r25, r1
     63e:	a4 f1       	brlt	.+104    	; 0x6a8 <__vector_23+0xac>
		clock = 0;
     640:	10 92 c7 01 	sts	0x01C7, r1
     644:	10 92 c6 01 	sts	0x01C6, r1
		score++;
     648:	e0 91 c0 01 	lds	r30, 0x01C0
     64c:	f0 91 c1 01 	lds	r31, 0x01C1
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	f0 93 c1 01 	sts	0x01C1, r31
     656:	e0 93 c0 01 	sts	0x01C0, r30
		if (score % 10 == 0){
     65a:	cf 01       	movw	r24, r30
     65c:	6a e0       	ldi	r22, 0x0A	; 10
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     664:	9c 01       	movw	r18, r24
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	71 f4       	brne	.+28     	; 0x686 <__vector_23+0x8a>
			score = 0;
     66a:	10 92 c1 01 	sts	0x01C1, r1
     66e:	10 92 c0 01 	sts	0x01C0, r1
			score_2++;
     672:	80 91 c2 01 	lds	r24, 0x01C2
     676:	90 91 c3 01 	lds	r25, 0x01C3
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 c3 01 	sts	0x01C3, r25
     680:	80 93 c2 01 	sts	0x01C2, r24
     684:	0f c0       	rjmp	.+30     	; 0x6a4 <__vector_23+0xa8>
		}
		else if (score > 10){
     686:	3b 97       	sbiw	r30, 0x0b	; 11
     688:	6c f0       	brlt	.+26     	; 0x6a4 <__vector_23+0xa8>
			score_2++;
     68a:	80 91 c2 01 	lds	r24, 0x01C2
     68e:	90 91 c3 01 	lds	r25, 0x01C3
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	90 93 c3 01 	sts	0x01C3, r25
     698:	80 93 c2 01 	sts	0x01C2, r24
			score = score % 10;
     69c:	30 93 c1 01 	sts	0x01C1, r19
     6a0:	20 93 c0 01 	sts	0x01C0, r18
		}
		refresh();
     6a4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
	}
	if (clock >= BOMB_COUNT && blow_up == true){
     6a8:	80 91 c6 01 	lds	r24, 0x01C6
     6ac:	90 91 c7 01 	lds	r25, 0x01C7
     6b0:	8a 35       	cpi	r24, 0x5A	; 90
     6b2:	91 05       	cpc	r25, r1
     6b4:	44 f0       	brlt	.+16     	; 0x6c6 <__vector_23+0xca>
     6b6:	80 91 c8 01 	lds	r24, 0x01C8
     6ba:	88 23       	and	r24, r24
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__vector_23+0xca>
		blow_up = false;
     6be:	10 92 c8 01 	sts	0x01C8, r1
		has_grenade = false;
     6c2:	10 92 c9 01 	sts	0x01C9, r1
	}
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <border>:
	
	return dead;
}

void border(void){
	draw_y_line(0, 0, LCD_Y);
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	40 e3       	ldi	r20, 0x30	; 48
     6ee:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <draw_y_line>
	draw_y_line(LCD_X, 0, LCD_Y);
     6f2:	86 e4       	ldi	r24, 0x46	; 70
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	40 e3       	ldi	r20, 0x30	; 48
     6f8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <draw_y_line>
	draw_x_line(0, 0, LCD_X);
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	46 e4       	ldi	r20, 0x46	; 70
     702:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <draw_x_line>
	draw_x_line(LCD_Y - 1, 0, LCD_X);
     706:	8f e2       	ldi	r24, 0x2F	; 47
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	46 e4       	ldi	r20, 0x46	; 70
     70c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <draw_x_line>
	
	draw_string("L:", LCD_X + 1, 0);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	67 e4       	ldi	r22, 0x47	; 71
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_character('0'+lives,LCD_X + 2, 10);
     71c:	80 91 06 01 	lds	r24, 0x0106
     720:	80 5d       	subi	r24, 0xD0	; 208
     722:	68 e4       	ldi	r22, 0x48	; 72
     724:	4a e0       	ldi	r20, 0x0A	; 10
     726:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <draw_character>
	draw_string("S:", LCD_X + 1, 20);
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	67 e4       	ldi	r22, 0x47	; 71
     730:	44 e1       	ldi	r20, 0x14	; 20
     732:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>

	draw_character('0'+score_2,LCD_X + 1, 30);
     736:	80 91 c2 01 	lds	r24, 0x01C2
     73a:	80 5d       	subi	r24, 0xD0	; 208
     73c:	67 e4       	ldi	r22, 0x47	; 71
     73e:	4e e1       	ldi	r20, 0x1E	; 30
     740:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <draw_character>
	draw_character('0'+score,LCD_X + 7, 30);
     744:	80 91 c0 01 	lds	r24, 0x01C0
     748:	80 5d       	subi	r24, 0xD0	; 208
     74a:	6d e4       	ldi	r22, 0x4D	; 77
     74c:	4e e1       	ldi	r20, 0x1E	; 30
     74e:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <draw_character>

00000752 <game>:

	}
	
}

void game(void){
     752:	2f 92       	push	r2
     754:	3f 92       	push	r3
     756:	4f 92       	push	r4
     758:	5f 92       	push	r5
     75a:	6f 92       	push	r6
     75c:	7f 92       	push	r7
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	e8 97       	sbiw	r28, 0x38	; 56
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
	clear();
     786:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <clear>

	Sprite one;
	Sprite zombie[num_z];
     78a:	80 91 08 01 	lds	r24, 0x0108
     78e:	90 91 09 01 	lds	r25, 0x0109
     792:	25 e1       	ldi	r18, 0x15	; 21
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	ac 01       	movw	r20, r24
     798:	42 9f       	mul	r20, r18
     79a:	c0 01       	movw	r24, r0
     79c:	43 9f       	mul	r20, r19
     79e:	90 0d       	add	r25, r0
     7a0:	52 9f       	mul	r21, r18
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	ad b7       	in	r26, 0x3d	; 61
     7a8:	be b7       	in	r27, 0x3e	; 62
     7aa:	a8 1b       	sub	r26, r24
     7ac:	b9 0b       	sbc	r27, r25
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	be bf       	out	0x3e, r27	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	ad bf       	out	0x3d, r26	; 61
     7b8:	6d b6       	in	r6, 0x3d	; 61
     7ba:	7e b6       	in	r7, 0x3e	; 62
     7bc:	08 94       	sec
     7be:	61 1c       	adc	r6, r1
     7c0:	71 1c       	adc	r7, r1

	byte p_bitmap[] = {
		BYTE(10100000),
		BYTE(11100000),
		BYTE(10100000),
	};
     7c2:	de 01       	movw	r26, r28
     7c4:	11 96       	adiw	r26, 0x01	; 1
     7c6:	e5 e1       	ldi	r30, 0x15	; 21
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <game+0x7a>
	
	byte z_bitmap[] = {
		BYTE(01000000),
		BYTE(11100000),
		BYTE(01000000),
	};
     7d4:	de 01       	movw	r26, r28
     7d6:	14 96       	adiw	r26, 0x04	; 4
     7d8:	e2 e1       	ldi	r30, 0x12	; 18
     7da:	f1 e0       	ldi	r31, 0x01	; 1
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	e1 f7       	brne	.-8      	; 0x7de <game+0x8c>
	
	byte sword_bitmap[] = {
		BYTE(01000000),
		BYTE(01000000),
		BYTE(11100000),
	};
     7e6:	de 01       	movw	r26, r28
     7e8:	17 96       	adiw	r26, 0x07	; 7
     7ea:	ef e0       	ldi	r30, 0x0F	; 15
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	01 90       	ld	r0, Z+
     7f2:	0d 92       	st	X+, r0
     7f4:	81 50       	subi	r24, 0x01	; 1
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <game+0x9e>
	
	byte grenade_bit[] = {
		BYTE(11100000),
		BYTE(10100000),
		BYTE(11100000),
	};
     7f8:	de 01       	movw	r26, r28
     7fa:	1a 96       	adiw	r26, 0x0a	; 10
     7fc:	ec e0       	ldi	r30, 0x0C	; 12
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	81 50       	subi	r24, 0x01	; 1
     808:	e1 f7       	brne	.-8      	; 0x802 <game+0xb0>
	
	Sprite *grenade = &gren;
	Sprite *player = &one;
	byte *player_bitm = &p_bitmap;
	Sprite *zombies[num_z];
     80a:	80 91 08 01 	lds	r24, 0x0108
     80e:	90 91 09 01 	lds	r25, 0x0109
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	ed b7       	in	r30, 0x3d	; 61
     818:	fe b7       	in	r31, 0x3e	; 62
     81a:	e8 1b       	sub	r30, r24
     81c:	f9 0b       	sbc	r31, r25
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	fe bf       	out	0x3e, r31	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	ed bf       	out	0x3d, r30	; 61
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	01 96       	adiw	r24, 0x01	; 1

	}
	
}

void game(void){
     82e:	8f ab       	std	Y+55, r24	; 0x37
     830:	98 af       	std	Y+56, r25	; 0x38
     832:	1c 01       	movw	r2, r24
     834:	73 01       	movw	r14, r6
     836:	cc 24       	eor	r12, r12
     838:	dd 24       	eor	r13, r13
		}
		else if (randx % 2 == 0){
			zombie[i].dx = -1;
		}
		else {
			zombie[i].dx = 0;
     83a:	0f 2e       	mov	r0, r31
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	8f 2e       	mov	r8, r31
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	9f 2e       	mov	r9, r31
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	af 2e       	mov	r10, r31
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	bf 2e       	mov	r11, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	6c c0       	rjmp	.+216    	; 0x928 <game+0x1d6>
	Sprite *zombies[num_z];
	Sprite *sword_p = &sword;
	byte *sword_p_bitmap = &sword_bitmap;
	
	for (int i = 0; i < num_z; i++){
		int randx = rand() % 100;
     850:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     854:	64 e6       	ldi	r22, 0x64	; 100
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     85c:	8c 01       	movw	r16, r24
		int randy = rand() % 100;
     85e:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     862:	2c 01       	movw	r4, r24
 		if (randx % 3 == 0){
     864:	c8 01       	movw	r24, r16
     866:	63 e0       	ldi	r22, 0x03	; 3
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     86e:	89 2b       	or	r24, r25
     870:	41 f4       	brne	.+16     	; 0x882 <game+0x130>
			zombie[i].dx = 0;
     872:	d7 01       	movw	r26, r14
     874:	1d 96       	adiw	r26, 0x0d	; 13
     876:	8d 92       	st	X+, r8
     878:	9d 92       	st	X+, r9
     87a:	ad 92       	st	X+, r10
     87c:	bc 92       	st	X, r11
     87e:	50 97       	sbiw	r26, 0x10	; 16
     880:	13 c0       	rjmp	.+38     	; 0x8a8 <game+0x156>
		}
		else if (randx % 2 == 0){
     882:	00 fd       	sbrc	r16, 0
     884:	0c c0       	rjmp	.+24     	; 0x89e <game+0x14c>
			zombie[i].dx = -1;
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f eb       	ldi	r21, 0xBF	; 191
     88e:	d7 01       	movw	r26, r14
     890:	1d 96       	adiw	r26, 0x0d	; 13
     892:	2d 93       	st	X+, r18
     894:	3d 93       	st	X+, r19
     896:	4d 93       	st	X+, r20
     898:	5c 93       	st	X, r21
     89a:	50 97       	sbiw	r26, 0x10	; 16
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <game+0x156>
		}
		else {
			zombie[i].dx = 0;
     89e:	f7 01       	movw	r30, r14
     8a0:	85 86       	std	Z+13, r8	; 0x0d
     8a2:	96 86       	std	Z+14, r9	; 0x0e
     8a4:	a7 86       	std	Z+15, r10	; 0x0f
     8a6:	b0 8a       	std	Z+16, r11	; 0x10
		}
		if (zombie[i].dx == 0){
     8a8:	d7 01       	movw	r26, r14
     8aa:	1d 96       	adiw	r26, 0x0d	; 13
     8ac:	6d 91       	ld	r22, X+
     8ae:	7d 91       	ld	r23, X+
     8b0:	8d 91       	ld	r24, X+
     8b2:	9c 91       	ld	r25, X
     8b4:	50 97       	sbiw	r26, 0x10	; 16
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__cmpsf2>
     8c2:	88 23       	and	r24, r24
     8c4:	c1 f4       	brne	.+48     	; 0x8f6 <game+0x1a4>
			if (randy % 2 == 0){
     8c6:	c2 01       	movw	r24, r4
     8c8:	64 e6       	ldi	r22, 0x64	; 100
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     8d0:	80 fd       	sbrc	r24, 0
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <game+0x18c>
				zombie[i].dy = -1;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e8       	ldi	r20, 0x80	; 128
     8da:	5f eb       	ldi	r21, 0xBF	; 191
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <game+0x194>
			}
			else {
				zombie[i].dy = 1;
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e8       	ldi	r20, 0x80	; 128
     8e4:	5f e3       	ldi	r21, 0x3F	; 63
     8e6:	d7 01       	movw	r26, r14
     8e8:	51 96       	adiw	r26, 0x11	; 17
     8ea:	2d 93       	st	X+, r18
     8ec:	3d 93       	st	X+, r19
     8ee:	4d 93       	st	X+, r20
     8f0:	5c 93       	st	X, r21
     8f2:	54 97       	sbiw	r26, 0x14	; 20
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <game+0x1ae>
			}
		}
		else {
			zombie[i].dy = 0;
     8f6:	f7 01       	movw	r30, r14
     8f8:	81 8a       	std	Z+17, r8	; 0x11
     8fa:	92 8a       	std	Z+18, r9	; 0x12
     8fc:	a3 8a       	std	Z+19, r10	; 0x13
     8fe:	b4 8a       	std	Z+20, r11	; 0x14
		}
		zombies[i] = &zombie[i];
     900:	25 e1       	ldi	r18, 0x15	; 21
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	c2 9e       	mul	r12, r18
     906:	c0 01       	movw	r24, r0
     908:	c3 9e       	mul	r12, r19
     90a:	90 0d       	add	r25, r0
     90c:	d2 9e       	mul	r13, r18
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	86 0d       	add	r24, r6
     914:	97 1d       	adc	r25, r7
     916:	d1 01       	movw	r26, r2
     918:	8d 93       	st	X+, r24
     91a:	9d 93       	st	X+, r25
     91c:	1d 01       	movw	r2, r26
	byte *player_bitm = &p_bitmap;
	Sprite *zombies[num_z];
	Sprite *sword_p = &sword;
	byte *sword_p_bitmap = &sword_bitmap;
	
	for (int i = 0; i < num_z; i++){
     91e:	08 94       	sec
     920:	c1 1c       	adc	r12, r1
     922:	d1 1c       	adc	r13, r1
     924:	e2 0e       	add	r14, r18
     926:	f3 1e       	adc	r15, r19
     928:	80 91 08 01 	lds	r24, 0x0108
     92c:	90 91 09 01 	lds	r25, 0x0109
     930:	c8 16       	cp	r12, r24
     932:	d9 06       	cpc	r13, r25
     934:	0c f4       	brge	.+2      	; 0x938 <game+0x1e6>
     936:	8c cf       	rjmp	.-232    	; 0x850 <game+0xfe>
		}
		zombies[i] = &zombie[i];
	}
	

	setup_z(zombie, &z_bitmap, player, sword_p, sword_p_bitmap);
     938:	36 2c       	mov	r3, r6
     93a:	a7 2c       	mov	r10, r7
     93c:	7d e0       	ldi	r23, 0x0D	; 13
     93e:	e7 2e       	mov	r14, r23
     940:	f1 2c       	mov	r15, r1
     942:	ec 0e       	add	r14, r28
     944:	fd 1e       	adc	r15, r29
     946:	62 e2       	ldi	r22, 0x22	; 34
     948:	c6 2e       	mov	r12, r22
     94a:	d1 2c       	mov	r13, r1
     94c:	cc 0e       	add	r12, r28
     94e:	dd 1e       	adc	r13, r29
     950:	c3 01       	movw	r24, r6
     952:	be 01       	movw	r22, r28
     954:	6c 5f       	subi	r22, 0xFC	; 252
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	a7 01       	movw	r20, r14
     95a:	96 01       	movw	r18, r12
     95c:	8e 01       	movw	r16, r28
     95e:	09 5f       	subi	r16, 0xF9	; 249
     960:	1f 4f       	sbci	r17, 0xFF	; 255
     962:	03 d3       	rcall	.+1542   	; 0xf6a <setup_z>
	setup_p(player, player_bitm, grenade, &grenade_bit);
     964:	c7 01       	movw	r24, r14
     966:	be 01       	movw	r22, r28
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	4e ec       	ldi	r20, 0xCE	; 206
     96e:	51 e0       	ldi	r21, 0x01	; 1
     970:	9e 01       	movw	r18, r28
     972:	26 5f       	subi	r18, 0xF6	; 246
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	c0 d4       	rcall	.+2432   	; 0x12f8 <setup_p>
	//_delay_ms(1000);
	
	bool has_sword = false;
	gren.is_visible = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 d8 01 	sts	0x01D8, r24
     97e:	bb 24       	eor	r11, r11
  	while(1){
		zombie_count = getZombie();
		if (zombie_count < 1){
			zombie_count = 8;
     980:	58 e0       	ldi	r21, 0x08	; 8
     982:	65 2e       	mov	r6, r21
     984:	71 2c       	mov	r7, r1
			clear();
			resetZombies();
			reset(zombies, player, 1);
     986:	1e 2d       	mov	r17, r14
     988:	ef 2c       	mov	r14, r15
			has_sword = false;
			reset_sword(sword_p, player);
     98a:	0c 2d       	mov	r16, r12
     98c:	cd 2c       	mov	r12, r13
			win_screen();
			setup_device();
			lives = 3;
     98e:	43 e0       	ldi	r20, 0x03	; 3
     990:	84 2e       	mov	r8, r20
     992:	91 2c       	mov	r9, r1
		if (has_grenade == true){
			grenade_indicator();
			gren.is_visible = 0;
		}
		else if (blow_up == true){
			gren.is_visible = 1;
     994:	ff 24       	eor	r15, r15
     996:	f3 94       	inc	r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     998:	30 e9       	ldi	r19, 0x90	; 144
     99a:	43 2e       	mov	r4, r19
     99c:	31 e0       	ldi	r19, 0x01	; 1
     99e:	53 2e       	mov	r5, r19
	//_delay_ms(1000);
	
	bool has_sword = false;
	gren.is_visible = 1;
  	while(1){
		zombie_count = getZombie();
     9a0:	7c d1       	rcall	.+760    	; 0xc9a <getZombie>
     9a2:	90 93 0b 01 	sts	0x010B, r25
     9a6:	80 93 0a 01 	sts	0x010A, r24
		if (zombie_count < 1){
     9aa:	18 16       	cp	r1, r24
     9ac:	19 06       	cpc	r1, r25
     9ae:	14 f1       	brlt	.+68     	; 0x9f4 <game+0x2a2>
			zombie_count = 8;
     9b0:	70 92 0b 01 	sts	0x010B, r7
     9b4:	60 92 0a 01 	sts	0x010A, r6
			clear();
     9b8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <clear>
			resetZombies();
     9bc:	73 d1       	rcall	.+742    	; 0xca4 <resetZombies>
			reset(zombies, player, 1);
     9be:	8f a9       	ldd	r24, Y+55	; 0x37
     9c0:	98 ad       	ldd	r25, Y+56	; 0x38
     9c2:	61 2f       	mov	r22, r17
     9c4:	7e 2d       	mov	r23, r14
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	fd dc       	rcall	.-1542   	; 0x3c6 <reset>
			has_sword = false;
			reset_sword(sword_p, player);
     9cc:	80 2f       	mov	r24, r16
     9ce:	9c 2d       	mov	r25, r12
     9d0:	61 2f       	mov	r22, r17
     9d2:	7e 2d       	mov	r23, r14
     9d4:	45 d6       	rcall	.+3210   	; 0x1660 <reset_sword>
			win_screen();
     9d6:	d9 d0       	rcall	.+434    	; 0xb8a <win_screen>
			setup_device();
     9d8:	47 d1       	rcall	.+654    	; 0xc68 <setup_device>
			lives = 3;
     9da:	90 92 07 01 	sts	0x0107, r9
     9de:	80 92 06 01 	sts	0x0106, r8
			score = 0;
     9e2:	10 92 c1 01 	sts	0x01C1, r1
     9e6:	10 92 c0 01 	sts	0x01C0, r1
			score_2 = 0;
     9ea:	10 92 c3 01 	sts	0x01C3, r1
     9ee:	10 92 c2 01 	sts	0x01C2, r1
     9f2:	bb 24       	eor	r11, r11
		}
		z_counter++;
     9f4:	80 91 c4 01 	lds	r24, 0x01C4
     9f8:	90 91 c5 01 	lds	r25, 0x01C5
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	90 93 c5 01 	sts	0x01C5, r25
     a02:	80 93 c4 01 	sts	0x01C4, r24
		border();
     a06:	70 de       	rcall	.-800    	; 0x6e8 <border>
		check_z_death(sword_p, zombies);
     a08:	80 2f       	mov	r24, r16
     a0a:	9c 2d       	mov	r25, r12
     a0c:	6f a9       	ldd	r22, Y+55	; 0x37
     a0e:	78 ad       	ldd	r23, Y+56	; 0x38
     a10:	bf d6       	rcall	.+3454   	; 0x1790 <check_z_death>
		blow_up = play_turn(player, has_grenade, grenade);
     a12:	81 2f       	mov	r24, r17
     a14:	9e 2d       	mov	r25, r14
     a16:	60 91 c9 01 	lds	r22, 0x01C9
     a1a:	4e ec       	ldi	r20, 0xCE	; 206
     a1c:	51 e0       	ldi	r21, 0x01	; 1
     a1e:	c4 d3       	rcall	.+1928   	; 0x11a8 <play_turn>
     a20:	80 93 c8 01 	sts	0x01C8, r24
		if (has_sword == true){
     a24:	bb 20       	and	r11, r11
     a26:	31 f0       	breq	.+12     	; 0xa34 <game+0x2e2>
			position_sword(player, sword_p);
     a28:	81 2f       	mov	r24, r17
     a2a:	9e 2d       	mov	r25, r14
     a2c:	60 2f       	mov	r22, r16
     a2e:	7c 2d       	mov	r23, r12
     a30:	b2 d4       	rcall	.+2404   	; 0x1396 <position_sword>
			sword_indicator();
     a32:	df d5       	rcall	.+3006   	; 0x15f2 <sword_indicator>
		}
		if (has_grenade == true){
     a34:	80 91 c9 01 	lds	r24, 0x01C9
     a38:	88 23       	and	r24, r24
     a3a:	21 f0       	breq	.+8      	; 0xa44 <game+0x2f2>
			grenade_indicator();
     a3c:	a3 d5       	rcall	.+2886   	; 0x1584 <grenade_indicator>
			gren.is_visible = 0;
     a3e:	10 92 d8 01 	sts	0x01D8, r1
     a42:	0f c0       	rjmp	.+30     	; 0xa62 <game+0x310>
		}
		else if (blow_up == true){
     a44:	80 91 c8 01 	lds	r24, 0x01C8
     a48:	88 23       	and	r24, r24
     a4a:	19 f0       	breq	.+6      	; 0xa52 <game+0x300>
			gren.is_visible = 1;
     a4c:	f0 92 d8 01 	sts	0x01D8, r15
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <game+0x310>
		}
		else {
			has_grenade = check_grenade(grenade, player, has_grenade);
     a52:	8e ec       	ldi	r24, 0xCE	; 206
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	61 2f       	mov	r22, r17
     a58:	7e 2d       	mov	r23, r14
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	46 d5       	rcall	.+2700   	; 0x14ea <check_grenade>
     a5e:	80 93 c9 01 	sts	0x01C9, r24
		}
		if (z_counter % 10 == 0){
     a62:	80 91 c4 01 	lds	r24, 0x01C4
     a66:	90 91 c5 01 	lds	r25, 0x01C5
     a6a:	6a e0       	ldi	r22, 0x0A	; 10
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
     a72:	89 2b       	or	r24, r25
     a74:	19 f4       	brne	.+6      	; 0xa7c <game+0x32a>
			z_play_turn(zombies);
     a76:	8f a9       	ldd	r24, Y+55	; 0x37
     a78:	98 ad       	ldd	r25, Y+56	; 0x38
     a7a:	b9 d1       	rcall	.+882    	; 0xdee <z_play_turn>
		}
		draw_sprite(player);
     a7c:	81 2f       	mov	r24, r17
     a7e:	9e 2d       	mov	r25, r14
     a80:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <draw_sprite>
		draw_z(zombie, sword_p, grenade);
     a84:	83 2d       	mov	r24, r3
     a86:	9a 2d       	mov	r25, r10
     a88:	60 2f       	mov	r22, r16
     a8a:	7c 2d       	mov	r23, r12
     a8c:	4e ec       	ldi	r20, 0xCE	; 206
     a8e:	51 e0       	ldi	r21, 0x01	; 1
     a90:	8b d1       	rcall	.+790    	; 0xda8 <draw_z>
		has_sword = check_sword(sword_p, player, has_sword);
     a92:	80 2f       	mov	r24, r16
     a94:	9c 2d       	mov	r25, r12
     a96:	61 2f       	mov	r22, r17
     a98:	7e 2d       	mov	r23, r14
     a9a:	4b 2d       	mov	r20, r11
     a9c:	ba d6       	rcall	.+3444   	; 0x1812 <check_sword>
     a9e:	b8 2e       	mov	r11, r24
		bool dead = check_death(zombies, player);
     aa0:	8f a9       	ldd	r24, Y+55	; 0x37
     aa2:	98 ad       	ldd	r25, Y+56	; 0x38
     aa4:	61 2f       	mov	r22, r17
     aa6:	7e 2d       	mov	r23, r14
     aa8:	2c dc       	rcall	.-1960   	; 0x302 <check_death>
		
 		if (dead == true){
     aaa:	88 23       	and	r24, r24
     aac:	69 f0       	breq	.+26     	; 0xac8 <game+0x376>
			reset(zombies, player, 0);
     aae:	8f a9       	ldd	r24, Y+55	; 0x37
     ab0:	98 ad       	ldd	r25, Y+56	; 0x38
     ab2:	61 2f       	mov	r22, r17
     ab4:	7e 2d       	mov	r23, r14
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	85 dc       	rcall	.-1782   	; 0x3c6 <reset>
			has_sword = false;
			reset_sword(sword_p, player);
     abc:	80 2f       	mov	r24, r16
     abe:	9c 2d       	mov	r25, r12
     ac0:	61 2f       	mov	r22, r17
     ac2:	7e 2d       	mov	r23, r14
     ac4:	cd d5       	rcall	.+2970   	; 0x1660 <reset_sword>
     ac6:	bb 24       	eor	r11, r11
		}
		if (lives != 3 && lives != 2 && lives != 1){
     ac8:	80 91 06 01 	lds	r24, 0x0106
     acc:	90 91 07 01 	lds	r25, 0x0107
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	03 97       	sbiw	r24, 0x03	; 3
     ad4:	10 f1       	brcs	.+68     	; 0xb1a <__stack+0x1b>
			clear();
     ad6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <clear>
			zombie_count = 8;
     ada:	70 92 0b 01 	sts	0x010B, r7
     ade:	60 92 0a 01 	sts	0x010A, r6
			resetZombies();
     ae2:	e0 d0       	rcall	.+448    	; 0xca4 <resetZombies>
			reset(zombies, player, 1);
     ae4:	8f a9       	ldd	r24, Y+55	; 0x37
     ae6:	98 ad       	ldd	r25, Y+56	; 0x38
     ae8:	61 2f       	mov	r22, r17
     aea:	7e 2d       	mov	r23, r14
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	6a dc       	rcall	.-1836   	; 0x3c6 <reset>
			has_sword = false;
			reset_sword(sword_p, player);
     af2:	80 2f       	mov	r24, r16
     af4:	9c 2d       	mov	r25, r12
     af6:	61 2f       	mov	r22, r17
     af8:	7e 2d       	mov	r23, r14
     afa:	b2 d5       	rcall	.+2916   	; 0x1660 <reset_sword>
			game_over();
     afc:	27 d0       	rcall	.+78     	; 0xb4c <game_over>
			setup_device();
     afe:	b4 d0       	rcall	.+360    	; 0xc68 <setup_device>
			lives = 3;
     b00:	90 92 07 01 	sts	0x0107, r9
     b04:	80 92 06 01 	sts	0x0106, r8
			score = 0;
     b08:	10 92 c1 01 	sts	0x01C1, r1
     b0c:	10 92 c0 01 	sts	0x01C0, r1
			score_2 = 0;
     b10:	10 92 c3 01 	sts	0x01C3, r1
     b14:	10 92 c2 01 	sts	0x01C2, r1
     b18:	bb 24       	eor	r11, r11
		}
		refresh();
     b1a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
     b1e:	88 ee       	ldi	r24, 0xE8	; 232
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	f2 01       	movw	r30, r4
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <__stack+0x25>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b2a:	d9 f7       	brne	.-10     	; 0xb22 <__stack+0x23>
		_delay_ms(100);
		turn_off(LED1);
     b2c:	2b 98       	cbi	0x05, 3	; 5
		turn_off(LED0);
     b2e:	2a 98       	cbi	0x05, 2	; 5
		clear();
     b30:	f4 d7       	rcall	.+4072   	; 0x1b1a <clear>
     b32:	36 cf       	rjmp	.-404    	; 0x9a0 <game+0x24e>

00000b34 <main>:
	}
}

int main( void ) {

	CPU_PRESCALE(CPU_8MHz);
     b34:	e1 e6       	ldi	r30, 0x61	; 97
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	80 83       	st	Z, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 83       	st	Z, r24

	setup_device();
     b40:	93 d0       	rcall	.+294    	; 0xc68 <setup_device>
	TimerInit();
     b42:	c1 db       	rcall	.-2174   	; 0x2c6 <TimerInit>

	game();
     b44:	06 de       	rcall	.-1012   	; 0x752 <game>

	
	return 0;
}
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <game_over>:
	refresh();
	turn_on(LED0);
	_delay_ms(1000);
}
void game_over(void){
	draw_string("You lost all your", 0, 10);
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	4a e0       	ldi	r20, 0x0A	; 10
     b54:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("lives!", 10, 20);
     b58:	8a e2       	ldi	r24, 0x2A	; 42
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	6a e0       	ldi	r22, 0x0A	; 10
     b5e:	44 e1       	ldi	r20, 0x14	; 20
     b60:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("- GAME OVER -", 10, 35);
     b64:	81 e3       	ldi	r24, 0x31	; 49
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	6a e0       	ldi	r22, 0x0A	; 10
     b6a:	43 e2       	ldi	r20, 0x23	; 35
     b6c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     b70:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
	turn_on(LED0);
     b74:	2a 9a       	sbi	0x05, 2	; 5
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	97 e2       	ldi	r25, 0x27	; 39
     b7a:	20 e9       	ldi	r18, 0x90	; 144
     b7c:	31 e0       	ldi	r19, 0x01	; 1
     b7e:	f9 01       	movw	r30, r18
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <game_over+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b86:	d9 f7       	brne	.-10     	; 0xb7e <game_over+0x32>
	_delay_ms(1000);
}
     b88:	08 95       	ret

00000b8a <win_screen>:
	refresh();
	turn_off(LED1);
	counter();
}
void win_screen(void){
	draw_string("Congratulations!", 0, 10);
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	4a e0       	ldi	r20, 0x0A	; 10
     b92:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("You killed all", 0, 25);
     b96:	80 e5       	ldi	r24, 0x50	; 80
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	49 e1       	ldi	r20, 0x19	; 25
     b9e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("the zombies!", 10, 35);
     ba2:	8f e5       	ldi	r24, 0x5F	; 95
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	6a e0       	ldi	r22, 0x0A	; 10
     ba8:	43 e2       	ldi	r20, 0x23	; 35
     baa:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     bae:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
	turn_on(LED0);
     bb2:	2a 9a       	sbi	0x05, 2	; 5
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	97 e2       	ldi	r25, 0x27	; 39
     bb8:	20 e9       	ldi	r18, 0x90	; 144
     bba:	31 e0       	ldi	r19, 0x01	; 1
     bbc:	f9 01       	movw	r30, r18
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <win_screen+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <win_screen+0x32>
	_delay_ms(1000);
}
     bc6:	08 95       	ret

00000bc8 <start_screen>:
#include <stdio.h>
#include "start.h"


void start_screen(void){
	draw_string("Benjamin McColm-", 0, 2);
     bc8:	8c e6       	ldi	r24, 0x6C	; 108
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	42 e0       	ldi	r20, 0x02	; 2
     bd0:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("Pickford", 0, 12);
     bd4:	8d e7       	ldi	r24, 0x7D	; 125
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	4c e0       	ldi	r20, 0x0C	; 12
     bdc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("n8847762", 0, 25);
     be0:	86 e8       	ldi	r24, 0x86	; 134
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	49 e1       	ldi	r20, 0x19	; 25
     be8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	draw_string("Press any button", 0, 40);
     bec:	8f e8       	ldi	r24, 0x8F	; 143
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	48 e2       	ldi	r20, 0x28	; 40
     bf4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     bf8:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <refresh>

00000bfc <counter>:
}
void counter(void){
	draw_string("- 3 -", LCD_X / 2 - 7, LCD_Y / 2 - 8);
     bfc:	80 ea       	ldi	r24, 0xA0	; 160
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	6c e1       	ldi	r22, 0x1C	; 28
     c02:	40 e1       	ldi	r20, 0x10	; 16
     c04:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     c08:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
     c0c:	88 e8       	ldi	r24, 0x88	; 136
     c0e:	93 e1       	ldi	r25, 0x13	; 19
     c10:	20 e9       	ldi	r18, 0x90	; 144
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	f9 01       	movw	r30, r18
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <counter+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	d9 f7       	brne	.-10     	; 0xc14 <counter+0x18>
	_delay_ms(500);
	clear();
     c1e:	7d d7       	rcall	.+3834   	; 0x1b1a <clear>
	draw_string("- 2 -", LCD_X / 2 - 7, LCD_Y / 2- 8);
     c20:	86 ea       	ldi	r24, 0xA6	; 166
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	6c e1       	ldi	r22, 0x1C	; 28
     c26:	40 e1       	ldi	r20, 0x10	; 16
     c28:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     c2c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
     c30:	88 e8       	ldi	r24, 0x88	; 136
     c32:	93 e1       	ldi	r25, 0x13	; 19
     c34:	20 e9       	ldi	r18, 0x90	; 144
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	f9 01       	movw	r30, r18
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <counter+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	d9 f7       	brne	.-10     	; 0xc38 <counter+0x3c>
	_delay_ms(500);
	clear();
     c42:	6b d7       	rcall	.+3798   	; 0x1b1a <clear>
	draw_string("- 1 -", LCD_X / 2- 7, LCD_Y / 2- 8);
     c44:	8c ea       	ldi	r24, 0xAC	; 172
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	6c e1       	ldi	r22, 0x1C	; 28
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <draw_string>
	refresh();
     c50:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
     c54:	88 e8       	ldi	r24, 0x88	; 136
     c56:	93 e1       	ldi	r25, 0x13	; 19
     c58:	20 e9       	ldi	r18, 0x90	; 144
     c5a:	31 e0       	ldi	r19, 0x01	; 1
     c5c:	f9 01       	movw	r30, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <counter+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c64:	d9 f7       	brne	.-10     	; 0xc5c <counter+0x60>
	_delay_ms(500);
	clear();
}
     c66:	59 c7       	rjmp	.+3762   	; 0x1b1a <clear>

00000c68 <setup_device>:

void setup_device(void){
	//set_clock_speed( CPU_16MHz );
	DDRB = ( LED0 | LED1 ) & ~( SW0 | SW1 );
     c68:	8c e0       	ldi	r24, 0x0C	; 12
     c6a:	84 b9       	out	0x04, r24	; 4
	DDRD = LED2; 
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
     c70:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
     c72:	1b b8       	out	0x0b, r1	; 11

	LCDInitialise( LCD_DEFAULT_CONTRAST );
     c74:	8f e3       	ldi	r24, 0x3F	; 63
     c76:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCDInitialise>
	
	clear();
     c7a:	4f d7       	rcall	.+3742   	; 0x1b1a <clear>
	start_screen();
     c7c:	a5 df       	rcall	.-182    	; 0xbc8 <start_screen>
	turn_on(LED1);
     c7e:	2b 9a       	sbi	0x05, 3	; 5
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <setup_device+0x20>
	int seed = 0;
	while(!pressed(SW1)){
		seed++;
     c86:	01 96       	adiw	r24, 0x01	; 1
	
	clear();
	start_screen();
	turn_on(LED1);
	int seed = 0;
	while(!pressed(SW1)){
     c88:	19 9b       	sbis	0x03, 1	; 3
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <setup_device+0x1e>
		seed++;
	}
	srand(seed);
     c8c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <srand>
	clear();
     c90:	44 d7       	rcall	.+3720   	; 0x1b1a <clear>
	refresh();
     c92:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <refresh>
	turn_off(LED1);
     c96:	2b 98       	cbi	0x05, 3	; 5
	counter();
}
     c98:	b1 cf       	rjmp	.-158    	; 0xbfc <counter>

00000c9a <getZombie>:
	increase_score(2);
	NUM_ZOMBIES--;
}
int getZombie(void){
	return NUM_ZOMBIES;
}
     c9a:	80 91 b2 01 	lds	r24, 0x01B2
     c9e:	90 91 b3 01 	lds	r25, 0x01B3
     ca2:	08 95       	ret

00000ca4 <resetZombies>:
void resetZombies(void){
	NUM_ZOMBIES = 8;
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 b3 01 	sts	0x01B3, r25
     cac:	80 93 b2 01 	sts	0x01B2, r24
}
     cb0:	08 95       	ret

00000cb2 <z_turn>:

	draw_sprite(sword);
	refresh();
	//turn_on(LED1);
}
void z_turn(Sprite *zombie, int dir){
     cb2:	fc 01       	movw	r30, r24
	if (dir == 0){
     cb4:	61 15       	cp	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <z_turn+0x14>
		z_turn_counter--;
     cba:	80 91 ca 01 	lds	r24, 0x01CA
     cbe:	90 91 cb 01 	lds	r25, 0x01CB
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <z_turn+0x24>
	}
	else if (dir == 1){
     cc6:	61 30       	cpi	r22, 0x01	; 1
     cc8:	71 05       	cpc	r23, r1
     cca:	49 f4       	brne	.+18     	; 0xcde <z_turn+0x2c>
		z_turn_counter++;
     ccc:	80 91 ca 01 	lds	r24, 0x01CA
     cd0:	90 91 cb 01 	lds	r25, 0x01CB
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 cb 01 	sts	0x01CB, r25
     cda:	80 93 ca 01 	sts	0x01CA, r24
	}
	
	if (z_turn_counter > 3){
     cde:	80 91 ca 01 	lds	r24, 0x01CA
     ce2:	90 91 cb 01 	lds	r25, 0x01CB
     ce6:	04 97       	sbiw	r24, 0x04	; 4
     ce8:	24 f0       	brlt	.+8      	; 0xcf2 <z_turn+0x40>
		z_turn_counter = 0;
     cea:	10 92 cb 01 	sts	0x01CB, r1
     cee:	10 92 ca 01 	sts	0x01CA, r1
	}
	if (z_turn_counter < 0){
     cf2:	80 91 ca 01 	lds	r24, 0x01CA
     cf6:	90 91 cb 01 	lds	r25, 0x01CB
     cfa:	97 ff       	sbrs	r25, 7
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <z_turn+0x58>
		z_turn_counter = 3;
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	90 93 cb 01 	sts	0x01CB, r25
     d06:	80 93 ca 01 	sts	0x01CA, r24
	}
	switch (z_turn_counter){
     d0a:	80 91 ca 01 	lds	r24, 0x01CA
     d0e:	90 91 cb 01 	lds	r25, 0x01CB
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	c9 f0       	breq	.+50     	; 0xd4a <z_turn+0x98>
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	91 05       	cpc	r25, r1
     d1c:	1c f4       	brge	.+6      	; 0xd24 <z_turn+0x72>
     d1e:	89 2b       	or	r24, r25
     d20:	39 f0       	breq	.+14     	; 0xd30 <z_turn+0x7e>
     d22:	08 95       	ret
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	91 05       	cpc	r25, r1
     d28:	e9 f0       	breq	.+58     	; 0xd64 <z_turn+0xb2>
     d2a:	03 97       	sbiw	r24, 0x03	; 3
     d2c:	e1 f5       	brne	.+120    	; 0xda6 <z_turn+0xf4>
     d2e:	2b c0       	rjmp	.+86     	; 0xd86 <z_turn+0xd4>
		case 0 :
			zombie->dx = 0;
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	85 87       	std	Z+13, r24	; 0x0d
     d3a:	96 87       	std	Z+14, r25	; 0x0e
     d3c:	a7 87       	std	Z+15, r26	; 0x0f
     d3e:	b0 8b       	std	Z+16, r27	; 0x10
			zombie->dy = -1;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf eb       	ldi	r27, 0xBF	; 191
     d48:	19 c0       	rjmp	.+50     	; 0xd7c <z_turn+0xca>
			//zombie->x = zombie->x + 1;
			//turn_off(LED0);
			break;
		case 1 :
			zombie->dx = 1;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e8       	ldi	r26, 0x80	; 128
     d50:	bf e3       	ldi	r27, 0x3F	; 63
     d52:	85 87       	std	Z+13, r24	; 0x0d
     d54:	96 87       	std	Z+14, r25	; 0x0e
     d56:	a7 87       	std	Z+15, r26	; 0x0f
     d58:	b0 8b       	std	Z+16, r27	; 0x10
			zombie->dy = 0;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	0c c0       	rjmp	.+24     	; 0xd7c <z_turn+0xca>
			//zombie->y = zombie->y + 1;
			//turn_on(LED1);
			break;
		case 2 :
			zombie->dx = 0;
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	85 87       	std	Z+13, r24	; 0x0d
     d6e:	96 87       	std	Z+14, r25	; 0x0e
     d70:	a7 87       	std	Z+15, r26	; 0x0f
     d72:	b0 8b       	std	Z+16, r27	; 0x10
			zombie->dy = 1;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e8       	ldi	r26, 0x80	; 128
     d7a:	bf e3       	ldi	r27, 0x3F	; 63
     d7c:	81 8b       	std	Z+17, r24	; 0x11
     d7e:	92 8b       	std	Z+18, r25	; 0x12
     d80:	a3 8b       	std	Z+19, r26	; 0x13
     d82:	b4 8b       	std	Z+20, r27	; 0x14
     d84:	08 95       	ret
			//zombie->x = zombie->x - 1;
			//turn_on(LED0);
			break;
		case 3 :
			zombie->dx = -1;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 e8       	ldi	r26, 0x80	; 128
     d8c:	bf eb       	ldi	r27, 0xBF	; 191
     d8e:	85 87       	std	Z+13, r24	; 0x0d
     d90:	96 87       	std	Z+14, r25	; 0x0e
     d92:	a7 87       	std	Z+15, r26	; 0x0f
     d94:	b0 8b       	std	Z+16, r27	; 0x10
			zombie->dy = 0;
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e0       	ldi	r26, 0x00	; 0
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	81 8b       	std	Z+17, r24	; 0x11
     da0:	92 8b       	std	Z+18, r25	; 0x12
     da2:	a3 8b       	std	Z+19, r26	; 0x13
     da4:	b4 8b       	std	Z+20, r27	; 0x14
     da6:	08 95       	ret

00000da8 <draw_z>:
		zombie[i]->x += zombie[i]->dx;
		zombie[i]->y +=zombie[i]->dy;
	}
}

void draw_z(Sprite zombie[8], Sprite *sword, Sprite *grenade){
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	7b 01       	movw	r14, r22
     dbc:	6a 01       	movw	r12, r20
     dbe:	c0 e0       	ldi	r28, 0x00	; 0
     dc0:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 8; i++){
		draw_sprite(&zombie[i]);
     dc2:	c8 01       	movw	r24, r16
     dc4:	8c 0f       	add	r24, r28
     dc6:	9d 1f       	adc	r25, r29
     dc8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <draw_sprite>
     dcc:	65 96       	adiw	r28, 0x15	; 21
		zombie[i]->y +=zombie[i]->dy;
	}
}

void draw_z(Sprite zombie[8], Sprite *sword, Sprite *grenade){
	for (int i = 0; i < 8; i++){
     dce:	c8 3a       	cpi	r28, 0xA8	; 168
     dd0:	d1 05       	cpc	r29, r1
     dd2:	b9 f7       	brne	.-18     	; 0xdc2 <draw_z+0x1a>
		draw_sprite(&zombie[i]);
	}
	draw_sprite(sword);
     dd4:	c7 01       	movw	r24, r14
     dd6:	fa d7       	rcall	.+4084   	; 0x1dcc <draw_sprite>
	draw_sprite(grenade);
     dd8:	c6 01       	movw	r24, r12
     dda:	f8 d7       	rcall	.+4080   	; 0x1dcc <draw_sprite>
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	08 95       	ret

00000dee <z_play_turn>:
			//zombie->y = zombie->y - 1;
			//turn_off(LED1);
			break;
	}
}
void z_play_turn(Sprite *zombie[8]){
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	4c 01       	movw	r8, r24
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
 	for (int i = 0; i < 8; i++){
		int rand1 = rand() % 100;
     e10:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     e14:	64 e6       	ldi	r22, 0x64	; 100
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodhi4>
		if (rand1 < 5){
     e1c:	85 30       	cpi	r24, 0x05	; 5
     e1e:	91 05       	cpc	r25, r1
     e20:	34 f4       	brge	.+12     	; 0xe2e <z_play_turn+0x40>
			//turn_on(LED0);
			z_turn(zombie[i], 0);
     e22:	f4 01       	movw	r30, r8
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <z_play_turn+0x50>
		}
		else if (rand1 < 10){
     e2e:	8a 30       	cpi	r24, 0x0A	; 10
     e30:	91 05       	cpc	r25, r1
     e32:	34 f4       	brge	.+12     	; 0xe40 <z_play_turn+0x52>
			//turn_on(LED1);
			z_turn(zombie[i], 1);
     e34:	f4 01       	movw	r30, r8
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	39 df       	rcall	.-398    	; 0xcb2 <z_turn>
		}
/* 		if (zombie[i] > LCD_Y){
			continue;
		} */
		if (zombie[i]->x > LCD_X - 4 && zombie[i]->dx == 1){
     e40:	f4 01       	movw	r30, r8
     e42:	c0 81       	ld	r28, Z
     e44:	d1 81       	ldd	r29, Z+1	; 0x01
     e46:	a8 80       	ld	r10, Y
     e48:	b9 80       	ldd	r11, Y+1	; 0x01
     e4a:	ca 80       	ldd	r12, Y+2	; 0x02
     e4c:	db 80       	ldd	r13, Y+3	; 0x03
     e4e:	c6 01       	movw	r24, r12
     e50:	b5 01       	movw	r22, r10
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	44 e8       	ldi	r20, 0x84	; 132
     e58:	52 e4       	ldi	r21, 0x42	; 66
     e5a:	5b d6       	rcall	.+3254   	; 0x1b12 <__gesf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	64 f4       	brge	.+24     	; 0xe78 <z_play_turn+0x8a>
     e60:	6d 85       	ldd	r22, Y+13	; 0x0d
     e62:	7e 85       	ldd	r23, Y+14	; 0x0e
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	69 d5       	rcall	.+2770   	; 0x1944 <__cmpsf2>
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <z_play_turn+0x8a>
     e76:	5e c0       	rjmp	.+188    	; 0xf34 <z_play_turn+0x146>
			continue;
		}
		else if (zombie[i]->x < 2 && zombie[i]->dx == -1){
     e78:	c6 01       	movw	r24, r12
     e7a:	b5 01       	movw	r22, r10
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e4       	ldi	r21, 0x40	; 64
     e84:	5f d5       	rcall	.+2750   	; 0x1944 <__cmpsf2>
     e86:	88 23       	and	r24, r24
     e88:	64 f4       	brge	.+24     	; 0xea2 <z_play_turn+0xb4>
     e8a:	6d 85       	ldd	r22, Y+13	; 0x0d
     e8c:	7e 85       	ldd	r23, Y+14	; 0x0e
     e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e90:	98 89       	ldd	r25, Y+16	; 0x10
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f eb       	ldi	r21, 0xBF	; 191
     e9a:	54 d5       	rcall	.+2728   	; 0x1944 <__cmpsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <z_play_turn+0xb4>
     ea0:	49 c0       	rjmp	.+146    	; 0xf34 <z_play_turn+0x146>
			continue;
		}
		else if (zombie[i]->y > LCD_Y - 5 && zombie[i]->dy == 1){
     ea2:	ec 80       	ldd	r14, Y+4	; 0x04
     ea4:	fd 80       	ldd	r15, Y+5	; 0x05
     ea6:	0e 81       	ldd	r16, Y+6	; 0x06
     ea8:	1f 81       	ldd	r17, Y+7	; 0x07
     eaa:	c8 01       	movw	r24, r16
     eac:	b7 01       	movw	r22, r14
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4c e2       	ldi	r20, 0x2C	; 44
     eb4:	52 e4       	ldi	r21, 0x42	; 66
     eb6:	2d d6       	rcall	.+3162   	; 0x1b12 <__gesf2>
     eb8:	18 16       	cp	r1, r24
     eba:	5c f4       	brge	.+22     	; 0xed2 <z_play_turn+0xe4>
     ebc:	69 89       	ldd	r22, Y+17	; 0x11
     ebe:	7a 89       	ldd	r23, Y+18	; 0x12
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	3b d5       	rcall	.+2678   	; 0x1944 <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	89 f1       	breq	.+98     	; 0xf34 <z_play_turn+0x146>
			continue;
		}
		else if (zombie[i]->y < 2 && zombie[i]->dy == -1){
     ed2:	c8 01       	movw	r24, r16
     ed4:	b7 01       	movw	r22, r14
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e4       	ldi	r21, 0x40	; 64
     ede:	32 d5       	rcall	.+2660   	; 0x1944 <__cmpsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	5c f4       	brge	.+22     	; 0xefa <z_play_turn+0x10c>
     ee4:	69 89       	ldd	r22, Y+17	; 0x11
     ee6:	7a 89       	ldd	r23, Y+18	; 0x12
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	9c 89       	ldd	r25, Y+20	; 0x14
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f eb       	ldi	r21, 0xBF	; 191
     ef4:	27 d5       	rcall	.+2638   	; 0x1944 <__cmpsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	e9 f0       	breq	.+58     	; 0xf34 <z_play_turn+0x146>
			continue;
		}			
		zombie[i]->x += zombie[i]->dx;
     efa:	c6 01       	movw	r24, r12
     efc:	b5 01       	movw	r22, r10
     efe:	2d 85       	ldd	r18, Y+13	; 0x0d
     f00:	3e 85       	ldd	r19, Y+14	; 0x0e
     f02:	4f 85       	ldd	r20, Y+15	; 0x0f
     f04:	58 89       	ldd	r21, Y+16	; 0x10
     f06:	ba d4       	rcall	.+2420   	; 0x187c <__addsf3>
     f08:	68 83       	st	Y, r22
     f0a:	79 83       	std	Y+1, r23	; 0x01
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	9b 83       	std	Y+3, r25	; 0x03
		zombie[i]->y +=zombie[i]->dy;
     f10:	f4 01       	movw	r30, r8
     f12:	00 81       	ld	r16, Z
     f14:	11 81       	ldd	r17, Z+1	; 0x01
     f16:	f8 01       	movw	r30, r16
     f18:	64 81       	ldd	r22, Z+4	; 0x04
     f1a:	75 81       	ldd	r23, Z+5	; 0x05
     f1c:	86 81       	ldd	r24, Z+6	; 0x06
     f1e:	97 81       	ldd	r25, Z+7	; 0x07
     f20:	21 89       	ldd	r18, Z+17	; 0x11
     f22:	32 89       	ldd	r19, Z+18	; 0x12
     f24:	43 89       	ldd	r20, Z+19	; 0x13
     f26:	54 89       	ldd	r21, Z+20	; 0x14
     f28:	a9 d4       	rcall	.+2386   	; 0x187c <__addsf3>
     f2a:	f8 01       	movw	r30, r16
     f2c:	64 83       	std	Z+4, r22	; 0x04
     f2e:	75 83       	std	Z+5, r23	; 0x05
     f30:	86 83       	std	Z+6, r24	; 0x06
     f32:	97 83       	std	Z+7, r25	; 0x07
			//turn_off(LED1);
			break;
	}
}
void z_play_turn(Sprite *zombie[8]){
 	for (int i = 0; i < 8; i++){
     f34:	08 94       	sec
     f36:	61 1c       	adc	r6, r1
     f38:	71 1c       	adc	r7, r1
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0e       	add	r8, r24
     f40:	99 1e       	adc	r9, r25
     f42:	98 e0       	ldi	r25, 0x08	; 8
     f44:	69 16       	cp	r6, r25
     f46:	71 04       	cpc	r7, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <z_play_turn+0x15e>
     f4a:	62 cf       	rjmp	.-316    	; 0xe10 <z_play_turn+0x22>
			continue;
		}			
		zombie[i]->x += zombie[i]->dx;
		zombie[i]->y +=zombie[i]->dy;
	}
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	af 90       	pop	r10
     f60:	9f 90       	pop	r9
     f62:	8f 90       	pop	r8
     f64:	7f 90       	pop	r7
     f66:	6f 90       	pop	r6
     f68:	08 95       	ret

00000f6a <setup_z>:
	return NUM_ZOMBIES;
}
void resetZombies(void){
	NUM_ZOMBIES = 8;
}
void setup_z(Sprite zombie[8], byte *bitmap, Sprite *player, Sprite *sword, byte *s_bitmap){
     f6a:	3f 92       	push	r3
     f6c:	4f 92       	push	r4
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	3b 01       	movw	r6, r22
     f8e:	49 01       	movw	r8, r18
     f90:	28 01       	movw	r4, r16
     f92:	ec 01       	movw	r28, r24
     f94:	aa 24       	eor	r10, r10
     f96:	bb 24       	eor	r11, r11
		}
		else {
			yrndm = yrndm2;
		}
		init_sprite(&zombie[i], xrndm, yrndm, 3, 3, bitmap);
		zombie[i].is_visible = 1;
     f98:	33 24       	eor	r3, r3
     f9a:	33 94       	inc	r3
void setup_z(Sprite zombie[8], byte *bitmap, Sprite *player, Sprite *sword, byte *s_bitmap){
	int xrndm;
	int yrndm;
	int xrndm1, xrndm2, yrndm1, yrndm2;
	for (int i = 0; i < 8; i++){
		xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
     f9c:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     fa0:	69 e1       	ldi	r22, 0x19	; 25
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	db d7       	rcall	.+4022   	; 0x1f5c <__divmodhi4>
     fa6:	7c 01       	movw	r14, r24
     fa8:	08 94       	sec
     faa:	e1 1c       	adc	r14, r1
     fac:	f1 1c       	adc	r15, r1
		yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
     fae:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     fb2:	6e e0       	ldi	r22, 0x0E	; 14
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	d2 d7       	rcall	.+4004   	; 0x1f5c <__divmodhi4>
     fb8:	6c 01       	movw	r12, r24
     fba:	08 94       	sec
     fbc:	c1 1c       	adc	r12, r1
     fbe:	d1 1c       	adc	r13, r1
		xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     fc0:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     fc4:	8c 01       	movw	r16, r24
		yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     fc6:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
     fca:	9c 01       	movw	r18, r24
		if (xrndm1 % 2 == 0){
     fcc:	e0 fc       	sbrc	r14, 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <setup_z+0x6a>
     fd0:	ee 2d       	mov	r30, r14
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <setup_z+0x76>
	int yrndm;
	int xrndm1, xrndm2, yrndm1, yrndm2;
	for (int i = 0; i < 8; i++){
		xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
		yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
		xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
     fd4:	c8 01       	movw	r24, r16
     fd6:	64 e1       	ldi	r22, 0x14	; 20
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	c0 d7       	rcall	.+3968   	; 0x1f5c <__divmodhi4>
     fdc:	e8 2f       	mov	r30, r24
     fde:	e3 5d       	subi	r30, 0xD3	; 211
			xrndm = xrndm1;
		}
		else {
			xrndm = xrndm2;
		}
		if (yrndm1 % 2 == 0){
     fe0:	c0 fc       	sbrc	r12, 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <setup_z+0x7e>
     fe4:	4c 2d       	mov	r20, r12
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <setup_z+0x8a>
	int xrndm1, xrndm2, yrndm1, yrndm2;
	for (int i = 0; i < 8; i++){
		xrndm1 = 1 + (rand() % (LCD_X / 2 - 10));
		yrndm1 = 1 + (rand() % (LCD_Y / 2 - 10));
		xrndm2 = (LCD_X / 2 + 10) + (rand() % ((LCD_X - 3) - (LCD_X / 2 + 12)));
		yrndm2 = (LCD_Y / 2 + 10) + (rand() % ((LCD_Y - 3) - (LCD_Y / 2 + 12)));
     fe8:	c9 01       	movw	r24, r18
     fea:	69 e0       	ldi	r22, 0x09	; 9
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	b6 d7       	rcall	.+3948   	; 0x1f5c <__divmodhi4>
     ff0:	48 2f       	mov	r20, r24
     ff2:	4e 5d       	subi	r20, 0xDE	; 222
			yrndm = yrndm1;
		}
		else {
			yrndm = yrndm2;
		}
		init_sprite(&zombie[i], xrndm, yrndm, 3, 3, bitmap);
     ff4:	ce 01       	movw	r24, r28
     ff6:	6e 2f       	mov	r22, r30
     ff8:	23 e0       	ldi	r18, 0x03	; 3
     ffa:	03 e0       	ldi	r16, 0x03	; 3
     ffc:	73 01       	movw	r14, r6
     ffe:	b6 d6       	rcall	.+3436   	; 0x1d6c <init_sprite>
		zombie[i].is_visible = 1;
    1000:	3a 86       	std	Y+10, r3	; 0x0a
		draw_sprite(&zombie[i]);
    1002:	ce 01       	movw	r24, r28
    1004:	e3 d6       	rcall	.+3526   	; 0x1dcc <draw_sprite>
}
void setup_z(Sprite zombie[8], byte *bitmap, Sprite *player, Sprite *sword, byte *s_bitmap){
	int xrndm;
	int yrndm;
	int xrndm1, xrndm2, yrndm1, yrndm2;
	for (int i = 0; i < 8; i++){
    1006:	08 94       	sec
    1008:	a1 1c       	adc	r10, r1
    100a:	b1 1c       	adc	r11, r1
    100c:	65 96       	adiw	r28, 0x15	; 21
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	a8 16       	cp	r10, r24
    1012:	b1 04       	cpc	r11, r1
    1014:	09 f0       	breq	.+2      	; 0x1018 <setup_z+0xae>
    1016:	c2 cf       	rjmp	.-124    	; 0xf9c <setup_z+0x32>
		}
		init_sprite(&zombie[i], xrndm, yrndm, 3, 3, bitmap);
		zombie[i].is_visible = 1;
		draw_sprite(&zombie[i]);
	}
	int s_xrndm = 1 + (rand() % (LCD_X - 3));
    1018:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
    101c:	8c 01       	movw	r16, r24
	int s_yrndm = 1 + (rand() % (LCD_Y - 3));
    101e:	0e 94 55 10 	call	0x20aa	; 0x20aa <rand>
    1022:	9c 01       	movw	r18, r24
	init_sprite(sword, s_xrndm, s_yrndm, 3, 3, s_bitmap);
    1024:	c8 01       	movw	r24, r16
    1026:	63 e4       	ldi	r22, 0x43	; 67
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	98 d7       	rcall	.+3888   	; 0x1f5c <__divmodhi4>
    102c:	fc 01       	movw	r30, r24
    102e:	31 96       	adiw	r30, 0x01	; 1
    1030:	c9 01       	movw	r24, r18
    1032:	6d e2       	ldi	r22, 0x2D	; 45
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	92 d7       	rcall	.+3876   	; 0x1f5c <__divmodhi4>
    1038:	ac 01       	movw	r20, r24
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	c4 01       	movw	r24, r8
    1040:	6e 2f       	mov	r22, r30
    1042:	23 e0       	ldi	r18, 0x03	; 3
    1044:	03 e0       	ldi	r16, 0x03	; 3
    1046:	72 01       	movw	r14, r4
    1048:	91 d6       	rcall	.+3362   	; 0x1d6c <init_sprite>

	draw_sprite(sword);
    104a:	c4 01       	movw	r24, r8
    104c:	bf d6       	rcall	.+3454   	; 0x1dcc <draw_sprite>
	refresh();
    104e:	29 d6       	rcall	.+3154   	; 0x1ca2 <refresh>
	//turn_on(LED1);
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	9f 90       	pop	r9
    1066:	8f 90       	pop	r8
    1068:	7f 90       	pop	r7
    106a:	6f 90       	pop	r6
    106c:	5f 90       	pop	r5
    106e:	4f 90       	pop	r4
    1070:	3f 90       	pop	r3
    1072:	08 95       	ret

00001074 <zombie_death>:
#include "main.h"

int z_turn_counter = 0;
int NUM_ZOMBIES = 8;

void zombie_death(Sprite *zombie){
    1074:	fc 01       	movw	r30, r24
	zombie->x = 0;
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	80 83       	st	Z, r24
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	a2 83       	std	Z+2, r26	; 0x02
    1084:	b3 83       	std	Z+3, r27	; 0x03
	zombie->y = 50;
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a8 e4       	ldi	r26, 0x48	; 72
    108c:	b2 e4       	ldi	r27, 0x42	; 66
    108e:	84 83       	std	Z+4, r24	; 0x04
    1090:	95 83       	std	Z+5, r25	; 0x05
    1092:	a6 83       	std	Z+6, r26	; 0x06
    1094:	b7 83       	std	Z+7, r27	; 0x07
	zombie->is_visible = 0;
    1096:	12 86       	std	Z+10, r1	; 0x0a
	increase_score(2);
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	27 d9       	rcall	.-3506   	; 0x2ec <increase_score>
	NUM_ZOMBIES--;
    109e:	80 91 b2 01 	lds	r24, 0x01B2
    10a2:	90 91 b3 01 	lds	r25, 0x01B3
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	90 93 b3 01 	sts	0x01B3, r25
    10ac:	80 93 b2 01 	sts	0x01B2, r24
}
    10b0:	08 95       	ret

000010b2 <turn>:
	
	refresh();
	return 1;
}

void turn(Sprite *player, int dir){
    10b2:	fc 01       	movw	r30, r24
	if (dir == 0){
    10b4:	61 15       	cp	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	31 f4       	brne	.+12     	; 0x10c6 <turn+0x14>
		turn_counter--;
    10ba:	80 91 cc 01 	lds	r24, 0x01CC
    10be:	90 91 cd 01 	lds	r25, 0x01CD
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <turn+0x24>
	}
	else if (dir == 1){
    10c6:	61 30       	cpi	r22, 0x01	; 1
    10c8:	71 05       	cpc	r23, r1
    10ca:	49 f4       	brne	.+18     	; 0x10de <turn+0x2c>
		turn_counter++;
    10cc:	80 91 cc 01 	lds	r24, 0x01CC
    10d0:	90 91 cd 01 	lds	r25, 0x01CD
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	90 93 cd 01 	sts	0x01CD, r25
    10da:	80 93 cc 01 	sts	0x01CC, r24
	}
	
	if (turn_counter > 3){
    10de:	80 91 cc 01 	lds	r24, 0x01CC
    10e2:	90 91 cd 01 	lds	r25, 0x01CD
    10e6:	04 97       	sbiw	r24, 0x04	; 4
    10e8:	24 f0       	brlt	.+8      	; 0x10f2 <turn+0x40>
		turn_counter = 0;
    10ea:	10 92 cd 01 	sts	0x01CD, r1
    10ee:	10 92 cc 01 	sts	0x01CC, r1
	}
	if (turn_counter < 0){
    10f2:	80 91 cc 01 	lds	r24, 0x01CC
    10f6:	90 91 cd 01 	lds	r25, 0x01CD
    10fa:	97 ff       	sbrs	r25, 7
    10fc:	06 c0       	rjmp	.+12     	; 0x110a <turn+0x58>
		turn_counter = 3;
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 cd 01 	sts	0x01CD, r25
    1106:	80 93 cc 01 	sts	0x01CC, r24
	}
	switch (turn_counter){
    110a:	80 91 cc 01 	lds	r24, 0x01CC
    110e:	90 91 cd 01 	lds	r25, 0x01CD
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	c9 f0       	breq	.+50     	; 0x114a <turn+0x98>
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	91 05       	cpc	r25, r1
    111c:	1c f4       	brge	.+6      	; 0x1124 <turn+0x72>
    111e:	89 2b       	or	r24, r25
    1120:	39 f0       	breq	.+14     	; 0x1130 <turn+0x7e>
    1122:	08 95       	ret
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	91 05       	cpc	r25, r1
    1128:	e9 f0       	breq	.+58     	; 0x1164 <turn+0xb2>
    112a:	03 97       	sbiw	r24, 0x03	; 3
    112c:	e1 f5       	brne	.+120    	; 0x11a6 <turn+0xf4>
    112e:	2b c0       	rjmp	.+86     	; 0x1186 <turn+0xd4>
		case 0 :
			player->dx = 0;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	85 87       	std	Z+13, r24	; 0x0d
    113a:	96 87       	std	Z+14, r25	; 0x0e
    113c:	a7 87       	std	Z+15, r26	; 0x0f
    113e:	b0 8b       	std	Z+16, r27	; 0x10
			player->dy = -1;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e8       	ldi	r26, 0x80	; 128
    1146:	bf eb       	ldi	r27, 0xBF	; 191
    1148:	19 c0       	rjmp	.+50     	; 0x117c <turn+0xca>
			//player->x = player->x + 1;
			//turn_off(LED0);
			break;
		case 1 :
			player->dx = 1;
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e8       	ldi	r26, 0x80	; 128
    1150:	bf e3       	ldi	r27, 0x3F	; 63
    1152:	85 87       	std	Z+13, r24	; 0x0d
    1154:	96 87       	std	Z+14, r25	; 0x0e
    1156:	a7 87       	std	Z+15, r26	; 0x0f
    1158:	b0 8b       	std	Z+16, r27	; 0x10
			player->dy = 0;
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	0c c0       	rjmp	.+24     	; 0x117c <turn+0xca>
			//player->y = player->y + 1;
			//turn_on(LED1);
			break;
		case 2 :
			player->dx = 0;
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	85 87       	std	Z+13, r24	; 0x0d
    116e:	96 87       	std	Z+14, r25	; 0x0e
    1170:	a7 87       	std	Z+15, r26	; 0x0f
    1172:	b0 8b       	std	Z+16, r27	; 0x10
			player->dy = 1;
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e8       	ldi	r26, 0x80	; 128
    117a:	bf e3       	ldi	r27, 0x3F	; 63
    117c:	81 8b       	std	Z+17, r24	; 0x11
    117e:	92 8b       	std	Z+18, r25	; 0x12
    1180:	a3 8b       	std	Z+19, r26	; 0x13
    1182:	b4 8b       	std	Z+20, r27	; 0x14
    1184:	08 95       	ret
			//player->x = player->x - 1;
			//turn_on(LED0);
			break;
		case 3 :
			player->dx = -1;
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e8       	ldi	r26, 0x80	; 128
    118c:	bf eb       	ldi	r27, 0xBF	; 191
    118e:	85 87       	std	Z+13, r24	; 0x0d
    1190:	96 87       	std	Z+14, r25	; 0x0e
    1192:	a7 87       	std	Z+15, r26	; 0x0f
    1194:	b0 8b       	std	Z+16, r27	; 0x10
			player->dy = 0;
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	81 8b       	std	Z+17, r24	; 0x11
    11a0:	92 8b       	std	Z+18, r25	; 0x12
    11a2:	a3 8b       	std	Z+19, r26	; 0x13
    11a4:	b4 8b       	std	Z+20, r27	; 0x14
    11a6:	08 95       	ret

000011a8 <play_turn>:
			//player->y = player->y - 1;
			//turn_off(LED1);
			break;
	}
}
bool play_turn(Sprite *player, bool has_grenade, Sprite *grenade){
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
	bool blow = false;
	if(pressed(SW0) || pressed(SW1)){
    11c0:	18 99       	sbic	0x03, 0	; 3
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <play_turn+0x20>
    11c4:	19 9b       	sbis	0x03, 1	; 3
    11c6:	18 c0       	rjmp	.+48     	; 0x11f8 <play_turn+0x50>
		if (pressed(SW0) && pressed(SW1) && has_grenade == true){
    11c8:	18 9b       	sbis	0x03, 0	; 3
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <play_turn+0x38>
    11cc:	19 9b       	sbis	0x03, 1	; 3
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <play_turn+0x38>
    11d0:	66 23       	and	r22, r22
    11d2:	31 f0       	breq	.+12     	; 0x11e0 <play_turn+0x38>
			place_grenade(player, grenade);
    11d4:	ce 01       	movw	r24, r28
    11d6:	ba 01       	movw	r22, r20
    11d8:	bc d1       	rcall	.+888    	; 0x1552 <place_grenade>
    11da:	99 24       	eor	r9, r9
    11dc:	93 94       	inc	r9
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <play_turn+0x52>
			blow = true;
		}
		else if (pressed(SW1)){
    11e0:	19 9b       	sbis	0x03, 1	; 3
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <play_turn+0x44>
			turn(player, 1);
    11e4:	ce 01       	movw	r24, r28
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <play_turn+0x4e>
		}
		else if(pressed(SW0)){
    11ec:	18 9b       	sbis	0x03, 0	; 3
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <play_turn+0x50>
			turn(player, 0);
    11f0:	ce 01       	movw	r24, r28
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	5d df       	rcall	.-326    	; 0x10b2 <turn>
    11f8:	99 24       	eor	r9, r9
		}
	}
	if (player->y < 2 && player->dy == -1){
    11fa:	ac 80       	ldd	r10, Y+4	; 0x04
    11fc:	bd 80       	ldd	r11, Y+5	; 0x05
    11fe:	ce 80       	ldd	r12, Y+6	; 0x06
    1200:	df 80       	ldd	r13, Y+7	; 0x07
    1202:	c6 01       	movw	r24, r12
    1204:	b5 01       	movw	r22, r10
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	50 e4       	ldi	r21, 0x40	; 64
    120e:	9a d3       	rcall	.+1844   	; 0x1944 <__cmpsf2>
    1210:	88 23       	and	r24, r24
    1212:	64 f4       	brge	.+24     	; 0x122c <play_turn+0x84>
    1214:	69 89       	ldd	r22, Y+17	; 0x11
    1216:	7a 89       	ldd	r23, Y+18	; 0x12
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f eb       	ldi	r21, 0xBF	; 191
    1224:	8f d3       	rcall	.+1822   	; 0x1944 <__cmpsf2>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <play_turn+0x84>
    122a:	59 c0       	rjmp	.+178    	; 0x12de <play_turn+0x136>
		return blow;
	}
	if (player->x < 2 && player->dx == -1){
    122c:	e8 80       	ld	r14, Y
    122e:	f9 80       	ldd	r15, Y+1	; 0x01
    1230:	0a 81       	ldd	r16, Y+2	; 0x02
    1232:	1b 81       	ldd	r17, Y+3	; 0x03
    1234:	c8 01       	movw	r24, r16
    1236:	b7 01       	movw	r22, r14
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	50 e4       	ldi	r21, 0x40	; 64
    1240:	81 d3       	rcall	.+1794   	; 0x1944 <__cmpsf2>
    1242:	88 23       	and	r24, r24
    1244:	64 f4       	brge	.+24     	; 0x125e <play_turn+0xb6>
    1246:	6d 85       	ldd	r22, Y+13	; 0x0d
    1248:	7e 85       	ldd	r23, Y+14	; 0x0e
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	98 89       	ldd	r25, Y+16	; 0x10
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f eb       	ldi	r21, 0xBF	; 191
    1256:	76 d3       	rcall	.+1772   	; 0x1944 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <play_turn+0xb6>
    125c:	40 c0       	rjmp	.+128    	; 0x12de <play_turn+0x136>
		return blow;
	}
	if (player->x > (LCD_X - 5) && player->dx == 1){
    125e:	c8 01       	movw	r24, r16
    1260:	b7 01       	movw	r22, r14
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	42 e8       	ldi	r20, 0x82	; 130
    1268:	52 e4       	ldi	r21, 0x42	; 66
    126a:	53 d4       	rcall	.+2214   	; 0x1b12 <__gesf2>
    126c:	18 16       	cp	r1, r24
    126e:	5c f4       	brge	.+22     	; 0x1286 <play_turn+0xde>
    1270:	6d 85       	ldd	r22, Y+13	; 0x0d
    1272:	7e 85       	ldd	r23, Y+14	; 0x0e
    1274:	8f 85       	ldd	r24, Y+15	; 0x0f
    1276:	98 89       	ldd	r25, Y+16	; 0x10
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	61 d3       	rcall	.+1730   	; 0x1944 <__cmpsf2>
    1282:	88 23       	and	r24, r24
    1284:	61 f1       	breq	.+88     	; 0x12de <play_turn+0x136>
		return blow;
	}
	if (player->y > (LCD_Y - 5) && player->dy == 1){
    1286:	c6 01       	movw	r24, r12
    1288:	b5 01       	movw	r22, r10
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4c e2       	ldi	r20, 0x2C	; 44
    1290:	52 e4       	ldi	r21, 0x42	; 66
    1292:	3f d4       	rcall	.+2174   	; 0x1b12 <__gesf2>
    1294:	18 16       	cp	r1, r24
    1296:	5c f4       	brge	.+22     	; 0x12ae <play_turn+0x106>
    1298:	69 89       	ldd	r22, Y+17	; 0x11
    129a:	7a 89       	ldd	r23, Y+18	; 0x12
    129c:	8b 89       	ldd	r24, Y+19	; 0x13
    129e:	9c 89       	ldd	r25, Y+20	; 0x14
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	4d d3       	rcall	.+1690   	; 0x1944 <__cmpsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	c1 f0       	breq	.+48     	; 0x12de <play_turn+0x136>
		return blow;
	}
	player->x += player->dx;
    12ae:	c8 01       	movw	r24, r16
    12b0:	b7 01       	movw	r22, r14
    12b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    12b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    12b6:	4f 85       	ldd	r20, Y+15	; 0x0f
    12b8:	58 89       	ldd	r21, Y+16	; 0x10
    12ba:	e0 d2       	rcall	.+1472   	; 0x187c <__addsf3>
    12bc:	68 83       	st	Y, r22
    12be:	79 83       	std	Y+1, r23	; 0x01
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	9b 83       	std	Y+3, r25	; 0x03
	player->y += player->dy;
    12c4:	6c 81       	ldd	r22, Y+4	; 0x04
    12c6:	7d 81       	ldd	r23, Y+5	; 0x05
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	9f 81       	ldd	r25, Y+7	; 0x07
    12cc:	29 89       	ldd	r18, Y+17	; 0x11
    12ce:	3a 89       	ldd	r19, Y+18	; 0x12
    12d0:	4b 89       	ldd	r20, Y+19	; 0x13
    12d2:	5c 89       	ldd	r21, Y+20	; 0x14
    12d4:	d3 d2       	rcall	.+1446   	; 0x187c <__addsf3>
    12d6:	6c 83       	std	Y+4, r22	; 0x04
    12d8:	7d 83       	std	Y+5, r23	; 0x05
    12da:	8e 83       	std	Y+6, r24	; 0x06
    12dc:	9f 83       	std	Y+7, r25	; 0x07
	
	return blow;
    12de:	89 2d       	mov	r24, r9
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	08 95       	ret

000012f8 <setup_p>:

int turn_counter = 0;



int setup_p(Sprite *sprite, byte *bitmap, Sprite *grenade, byte *g_bitmap){
    12f8:	8f 92       	push	r8
    12fa:	9f 92       	push	r9
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	6c 01       	movw	r12, r24
    130e:	7b 01       	movw	r14, r22
    1310:	5a 01       	movw	r10, r20
    1312:	49 01       	movw	r8, r18
	init_sprite(sprite,LCD_X / 2 - 1 , LCD_Y / 2 - 1, 3, 3, bitmap);
    1314:	62 e2       	ldi	r22, 0x22	; 34
    1316:	47 e1       	ldi	r20, 0x17	; 23
    1318:	23 e0       	ldi	r18, 0x03	; 3
    131a:	03 e0       	ldi	r16, 0x03	; 3
    131c:	27 d5       	rcall	.+2638   	; 0x1d6c <init_sprite>
	sprite->dx = 0;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	f6 01       	movw	r30, r12
    1328:	85 87       	std	Z+13, r24	; 0x0d
    132a:	96 87       	std	Z+14, r25	; 0x0e
    132c:	a7 87       	std	Z+15, r26	; 0x0f
    132e:	b0 8b       	std	Z+16, r27	; 0x10
	sprite->dy = -1;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e8       	ldi	r26, 0x80	; 128
    1336:	bf eb       	ldi	r27, 0xBF	; 191
    1338:	81 8b       	std	Z+17, r24	; 0x11
    133a:	92 8b       	std	Z+18, r25	; 0x12
    133c:	a3 8b       	std	Z+19, r26	; 0x13
    133e:	b4 8b       	std	Z+20, r27	; 0x14
	sprite->is_visible = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	82 87       	std	Z+10, r24	; 0x0a
	draw_sprite(sprite);
    1344:	c6 01       	movw	r24, r12
    1346:	42 d5       	rcall	.+2692   	; 0x1dcc <draw_sprite>
	
	int g_xrndm = 1 + (rand() % (LCD_X - 3));
    1348:	b0 d6       	rcall	.+3424   	; 0x20aa <rand>
    134a:	8c 01       	movw	r16, r24
	int g_yrndm = 1 + (rand() % (LCD_Y - 3));
    134c:	ae d6       	rcall	.+3420   	; 0x20aa <rand>
    134e:	9c 01       	movw	r18, r24
	init_sprite(grenade, g_xrndm, g_yrndm, 3, 3, g_bitmap);
    1350:	c8 01       	movw	r24, r16
    1352:	63 e4       	ldi	r22, 0x43	; 67
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	02 d6       	rcall	.+3076   	; 0x1f5c <__divmodhi4>
    1358:	fc 01       	movw	r30, r24
    135a:	31 96       	adiw	r30, 0x01	; 1
    135c:	c9 01       	movw	r24, r18
    135e:	6d e2       	ldi	r22, 0x2D	; 45
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	fc d5       	rcall	.+3064   	; 0x1f5c <__divmodhi4>
    1364:	ac 01       	movw	r20, r24
    1366:	4f 5f       	subi	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	c5 01       	movw	r24, r10
    136c:	6e 2f       	mov	r22, r30
    136e:	23 e0       	ldi	r18, 0x03	; 3
    1370:	03 e0       	ldi	r16, 0x03	; 3
    1372:	74 01       	movw	r14, r8
    1374:	fb d4       	rcall	.+2550   	; 0x1d6c <init_sprite>
	draw_sprite(grenade);
    1376:	c5 01       	movw	r24, r10
    1378:	29 d5       	rcall	.+2642   	; 0x1dcc <draw_sprite>
	
	refresh();
    137a:	93 d4       	rcall	.+2342   	; 0x1ca2 <refresh>
	return 1;
}
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	08 95       	ret

00001396 <position_sword>:
#include "player.h"
#include "main.h"

int num_zombies = 8; 

void position_sword(Sprite *player, Sprite *sword){
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	6b 01       	movw	r12, r22
	if (player->dx == -1 && player->dy == 0){ //LEFT
    13aa:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ac:	fe 84       	ldd	r15, Y+14	; 0x0e
    13ae:	0f 85       	ldd	r16, Y+15	; 0x0f
    13b0:	18 89       	ldd	r17, Y+16	; 0x10
    13b2:	c8 01       	movw	r24, r16
    13b4:	b7 01       	movw	r22, r14
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f eb       	ldi	r21, 0xBF	; 191
    13be:	c2 d2       	rcall	.+1412   	; 0x1944 <__cmpsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	a9 f4       	brne	.+42     	; 0x13ee <position_sword+0x58>
    13c4:	69 89       	ldd	r22, Y+17	; 0x11
    13c6:	7a 89       	ldd	r23, Y+18	; 0x12
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	b7 d2       	rcall	.+1390   	; 0x1944 <__cmpsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	51 f4       	brne	.+20     	; 0x13ee <position_sword+0x58>
		sword->x = player->x - 3;
    13da:	68 81       	ld	r22, Y
    13dc:	79 81       	ldd	r23, Y+1	; 0x01
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e4       	ldi	r20, 0x40	; 64
    13e8:	50 e4       	ldi	r21, 0x40	; 64
    13ea:	47 d2       	rcall	.+1166   	; 0x187a <__subsf3>
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <position_sword+0x92>
		sword->y = player->y;
	}
	else if (player->dx == 1 && player->dy == 0){ //RIGHT
    13ee:	c8 01       	movw	r24, r16
    13f0:	b7 01       	movw	r22, r14
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	a4 d2       	rcall	.+1352   	; 0x1944 <__cmpsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	11 f5       	brne	.+68     	; 0x1444 <position_sword+0xae>
    1400:	69 89       	ldd	r22, Y+17	; 0x11
    1402:	7a 89       	ldd	r23, Y+18	; 0x12
    1404:	8b 89       	ldd	r24, Y+19	; 0x13
    1406:	9c 89       	ldd	r25, Y+20	; 0x14
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	99 d2       	rcall	.+1330   	; 0x1944 <__cmpsf2>
    1412:	88 23       	and	r24, r24
    1414:	b9 f4       	brne	.+46     	; 0x1444 <position_sword+0xae>
		sword->x = player->x + 3;
    1416:	68 81       	ld	r22, Y
    1418:	79 81       	ldd	r23, Y+1	; 0x01
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e4       	ldi	r20, 0x40	; 64
    1424:	50 e4       	ldi	r21, 0x40	; 64
    1426:	2a d2       	rcall	.+1108   	; 0x187c <__addsf3>
    1428:	f6 01       	movw	r30, r12
    142a:	60 83       	st	Z, r22
    142c:	71 83       	std	Z+1, r23	; 0x01
    142e:	82 83       	std	Z+2, r24	; 0x02
    1430:	93 83       	std	Z+3, r25	; 0x03
		sword->y = player->y;
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	ae 81       	ldd	r26, Y+6	; 0x06
    1438:	bf 81       	ldd	r27, Y+7	; 0x07
    143a:	84 83       	std	Z+4, r24	; 0x04
    143c:	95 83       	std	Z+5, r25	; 0x05
    143e:	a6 83       	std	Z+6, r26	; 0x06
    1440:	b7 83       	std	Z+7, r27	; 0x07
    1442:	4a c0       	rjmp	.+148    	; 0x14d8 <position_sword+0x142>
	}
	else if (player->dx == 0 && player->dy == -1){ //UP
    1444:	c8 01       	movw	r24, r16
    1446:	b7 01       	movw	r22, r14
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	79 d2       	rcall	.+1266   	; 0x1944 <__cmpsf2>
    1452:	88 23       	and	r24, r24
    1454:	09 f0       	breq	.+2      	; 0x1458 <position_sword+0xc2>
    1456:	40 c0       	rjmp	.+128    	; 0x14d8 <position_sword+0x142>
    1458:	e9 88       	ldd	r14, Y+17	; 0x11
    145a:	fa 88       	ldd	r15, Y+18	; 0x12
    145c:	0b 89       	ldd	r16, Y+19	; 0x13
    145e:	1c 89       	ldd	r17, Y+20	; 0x14
    1460:	c8 01       	movw	r24, r16
    1462:	b7 01       	movw	r22, r14
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
    146a:	5f eb       	ldi	r21, 0xBF	; 191
    146c:	6b d2       	rcall	.+1238   	; 0x1944 <__cmpsf2>
    146e:	88 23       	and	r24, r24
    1470:	99 f4       	brne	.+38     	; 0x1498 <position_sword+0x102>
		sword->x = player->x;
    1472:	88 81       	ld	r24, Y
    1474:	99 81       	ldd	r25, Y+1	; 0x01
    1476:	aa 81       	ldd	r26, Y+2	; 0x02
    1478:	bb 81       	ldd	r27, Y+3	; 0x03
    147a:	f6 01       	movw	r30, r12
    147c:	80 83       	st	Z, r24
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	a2 83       	std	Z+2, r26	; 0x02
    1482:	b3 83       	std	Z+3, r27	; 0x03
		sword->y = player->y - 3;
    1484:	6c 81       	ldd	r22, Y+4	; 0x04
    1486:	7d 81       	ldd	r23, Y+5	; 0x05
    1488:	8e 81       	ldd	r24, Y+6	; 0x06
    148a:	9f 81       	ldd	r25, Y+7	; 0x07
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e4       	ldi	r20, 0x40	; 64
    1492:	50 e4       	ldi	r21, 0x40	; 64
    1494:	f2 d1       	rcall	.+996    	; 0x187a <__subsf3>
    1496:	1b c0       	rjmp	.+54     	; 0x14ce <position_sword+0x138>
	}
		else if (player->dx == 0 && player->dy == 1){ //DOWN
    1498:	c8 01       	movw	r24, r16
    149a:	b7 01       	movw	r22, r14
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	4f d2       	rcall	.+1182   	; 0x1944 <__cmpsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	b9 f4       	brne	.+46     	; 0x14d8 <position_sword+0x142>
		sword->x = player->x;
    14aa:	88 81       	ld	r24, Y
    14ac:	99 81       	ldd	r25, Y+1	; 0x01
    14ae:	aa 81       	ldd	r26, Y+2	; 0x02
    14b0:	bb 81       	ldd	r27, Y+3	; 0x03
    14b2:	f6 01       	movw	r30, r12
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	a2 83       	std	Z+2, r26	; 0x02
    14ba:	b3 83       	std	Z+3, r27	; 0x03
		sword->y = player->y + 3;
    14bc:	6c 81       	ldd	r22, Y+4	; 0x04
    14be:	7d 81       	ldd	r23, Y+5	; 0x05
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e4       	ldi	r20, 0x40	; 64
    14ca:	50 e4       	ldi	r21, 0x40	; 64
    14cc:	d7 d1       	rcall	.+942    	; 0x187c <__addsf3>
    14ce:	f6 01       	movw	r30, r12
    14d0:	64 83       	std	Z+4, r22	; 0x04
    14d2:	75 83       	std	Z+5, r23	; 0x05
    14d4:	86 83       	std	Z+6, r24	; 0x06
    14d6:	97 83       	std	Z+7, r25	; 0x07
	}
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	08 95       	ret

000014ea <check_grenade>:
	else {
		has_sword_1 = true;
	}
	return has_sword_1;
}
bool check_grenade(Sprite *grenade, Sprite *player, bool has_grenade){
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	7c 01       	movw	r14, r24
    14f6:	eb 01       	movw	r28, r22
	bool has_gren = false;
	if (has_grenade == false){
    14f8:	44 23       	and	r20, r20
    14fa:	19 f5       	brne	.+70     	; 0x1542 <check_grenade+0x58>
		if ((abs(player->x - grenade->x) < 3) && ((abs(player->y - grenade->y)) < 3)){
    14fc:	68 81       	ld	r22, Y
    14fe:	79 81       	ldd	r23, Y+1	; 0x01
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	f7 01       	movw	r30, r14
    1506:	20 81       	ld	r18, Z
    1508:	31 81       	ldd	r19, Z+1	; 0x01
    150a:	42 81       	ldd	r20, Z+2	; 0x02
    150c:	53 81       	ldd	r21, Z+3	; 0x03
    150e:	b5 d1       	rcall	.+874    	; 0x187a <__subsf3>
    1510:	1d d2       	rcall	.+1082   	; 0x194c <__fixsfsi>
    1512:	6e 5f       	subi	r22, 0xFE	; 254
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	65 30       	cpi	r22, 0x05	; 5
    1518:	71 05       	cpc	r23, r1
    151a:	10 f0       	brcs	.+4      	; 0x1520 <check_grenade+0x36>
    151c:	10 e0       	ldi	r17, 0x00	; 0
    151e:	12 c0       	rjmp	.+36     	; 0x1544 <check_grenade+0x5a>
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	6c 81       	ldd	r22, Y+4	; 0x04
    1524:	7d 81       	ldd	r23, Y+5	; 0x05
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	f7 01       	movw	r30, r14
    152c:	24 81       	ldd	r18, Z+4	; 0x04
    152e:	35 81       	ldd	r19, Z+5	; 0x05
    1530:	46 81       	ldd	r20, Z+6	; 0x06
    1532:	57 81       	ldd	r21, Z+7	; 0x07
    1534:	a2 d1       	rcall	.+836    	; 0x187a <__subsf3>
    1536:	0a d2       	rcall	.+1044   	; 0x194c <__fixsfsi>
    1538:	6e 5f       	subi	r22, 0xFE	; 254
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	65 30       	cpi	r22, 0x05	; 5
    153e:	71 05       	cpc	r23, r1
    1540:	08 f4       	brcc	.+2      	; 0x1544 <check_grenade+0x5a>
    1542:	11 e0       	ldi	r17, 0x01	; 1
	}
	else {
		has_gren = true;
	}
	return has_gren;
}
    1544:	81 2f       	mov	r24, r17
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	08 95       	ret

00001552 <place_grenade>:
	
	init_sprite(&grenade_indicator, LCD_X + 7, 39, 3, 3, &indicate_gren);
	draw_sprite(&grenade_indicator);
}

void place_grenade(Sprite *player, Sprite *grenade){
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	fb 01       	movw	r30, r22
	grenade->x = player->x;
    1558:	ec 01       	movw	r28, r24
    155a:	88 81       	ld	r24, Y
    155c:	99 81       	ldd	r25, Y+1	; 0x01
    155e:	aa 81       	ldd	r26, Y+2	; 0x02
    1560:	bb 81       	ldd	r27, Y+3	; 0x03
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
	grenade->y = player->y;
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	ae 81       	ldd	r26, Y+6	; 0x06
    1570:	bf 81       	ldd	r27, Y+7	; 0x07
    1572:	84 83       	std	Z+4, r24	; 0x04
    1574:	95 83       	std	Z+5, r25	; 0x05
    1576:	a6 83       	std	Z+6, r26	; 0x06
    1578:	b7 83       	std	Z+7, r27	; 0x07
	grenade->is_visible = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	82 87       	std	Z+10, r24	; 0x0a

}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <grenade_indicator>:
	Sprite sword_indicator;
	
	init_sprite(&sword_indicator, LCD_X + 2, 39, 3, 3, &indicate_sword);
	draw_sprite(&sword_indicator);
}
void grenade_indicator(void){
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	68 97       	sbiw	r28, 0x18	; 24
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
	byte indicate_gren[] = {
		BYTE(11100000),
		BYTE(10100000),
		BYTE(11100000),
	};
    15a2:	de 01       	movw	r26, r28
    15a4:	11 96       	adiw	r26, 0x01	; 1
    15a6:	e6 eb       	ldi	r30, 0xB6	; 182
    15a8:	f1 e0       	ldi	r31, 0x01	; 1
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	01 90       	ld	r0, Z+
    15ae:	0d 92       	st	X+, r0
    15b0:	81 50       	subi	r24, 0x01	; 1
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <grenade_indicator+0x28>
	Sprite grenade_indicator;
	
	init_sprite(&grenade_indicator, LCD_X + 7, 39, 3, 3, &indicate_gren);
    15b4:	84 e0       	ldi	r24, 0x04	; 4
    15b6:	c8 2e       	mov	r12, r24
    15b8:	d1 2c       	mov	r13, r1
    15ba:	cc 0e       	add	r12, r28
    15bc:	dd 1e       	adc	r13, r29
    15be:	c6 01       	movw	r24, r12
    15c0:	6d e4       	ldi	r22, 0x4D	; 77
    15c2:	47 e2       	ldi	r20, 0x27	; 39
    15c4:	23 e0       	ldi	r18, 0x03	; 3
    15c6:	03 e0       	ldi	r16, 0x03	; 3
    15c8:	7e 01       	movw	r14, r28
    15ca:	08 94       	sec
    15cc:	e1 1c       	adc	r14, r1
    15ce:	f1 1c       	adc	r15, r1
    15d0:	cd d3       	rcall	.+1946   	; 0x1d6c <init_sprite>
	draw_sprite(&grenade_indicator);
    15d2:	c6 01       	movw	r24, r12
    15d4:	fb d3       	rcall	.+2038   	; 0x1dcc <draw_sprite>
}
    15d6:	68 96       	adiw	r28, 0x18	; 24
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	08 95       	ret

000015f2 <sword_indicator>:
	sword->y = yrndm;
	sword->is_visible = 1;
	draw_sprite(sword);
}

void sword_indicator(void){
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	68 97       	sbiw	r28, 0x18	; 24
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
	byte indicate_sword[] = {
		BYTE(01000000),
		BYTE(01000000),
		BYTE(11100000),
	};
    1610:	de 01       	movw	r26, r28
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	e9 eb       	ldi	r30, 0xB9	; 185
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	01 90       	ld	r0, Z+
    161c:	0d 92       	st	X+, r0
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	e1 f7       	brne	.-8      	; 0x161a <sword_indicator+0x28>
	Sprite sword_indicator;
	
	init_sprite(&sword_indicator, LCD_X + 2, 39, 3, 3, &indicate_sword);
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	c9 2e       	mov	r12, r25
    1626:	d1 2c       	mov	r13, r1
    1628:	cc 0e       	add	r12, r28
    162a:	dd 1e       	adc	r13, r29
    162c:	c6 01       	movw	r24, r12
    162e:	68 e4       	ldi	r22, 0x48	; 72
    1630:	47 e2       	ldi	r20, 0x27	; 39
    1632:	23 e0       	ldi	r18, 0x03	; 3
    1634:	03 e0       	ldi	r16, 0x03	; 3
    1636:	7e 01       	movw	r14, r28
    1638:	08 94       	sec
    163a:	e1 1c       	adc	r14, r1
    163c:	f1 1c       	adc	r15, r1
    163e:	96 d3       	rcall	.+1836   	; 0x1d6c <init_sprite>
	draw_sprite(&sword_indicator);
    1640:	c6 01       	movw	r24, r12
    1642:	c4 d3       	rcall	.+1928   	; 0x1dcc <draw_sprite>
}
    1644:	68 96       	adiw	r28, 0x18	; 24
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <reset_sword>:
			zombie_death(zombie[i]);
		}
	}
}

void reset_sword(Sprite *sword, Sprite *player){
    1660:	2f 92       	push	r2
    1662:	3f 92       	push	r3
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	2c 01       	movw	r4, r24
    1686:	1b 01       	movw	r2, r22
	int xrndm = rand() % (LCD_X - 3);
	int yrndm = rand() % (LCD_Y - 3);
	while (xrndm > player->x - 10 && xrndm < player->x + 10 && yrndm > player->y - 10 && yrndm < player->y + 10){
		xrndm = rand() % (LCD_X - 3);
    1688:	10 d5       	rcall	.+2592   	; 0x20aa <rand>
    168a:	63 e4       	ldi	r22, 0x43	; 67
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	66 d4       	rcall	.+2252   	; 0x1f5c <__divmodhi4>
    1690:	8c 01       	movw	r16, r24
		yrndm = rand() % (LCD_Y - 3);
    1692:	0b d5       	rcall	.+2582   	; 0x20aa <rand>
    1694:	6d e2       	ldi	r22, 0x2D	; 45
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	61 d4       	rcall	.+2242   	; 0x1f5c <__divmodhi4>
    169a:	ec 01       	movw	r28, r24
}

void reset_sword(Sprite *sword, Sprite *player){
	int xrndm = rand() % (LCD_X - 3);
	int yrndm = rand() % (LCD_Y - 3);
	while (xrndm > player->x - 10 && xrndm < player->x + 10 && yrndm > player->y - 10 && yrndm < player->y + 10){
    169c:	b8 01       	movw	r22, r16
    169e:	88 27       	eor	r24, r24
    16a0:	77 fd       	sbrc	r23, 7
    16a2:	80 95       	com	r24
    16a4:	98 2f       	mov	r25, r24
    16a6:	85 d1       	rcall	.+778    	; 0x19b2 <__floatsisf>
    16a8:	3b 01       	movw	r6, r22
    16aa:	4c 01       	movw	r8, r24
    16ac:	f1 01       	movw	r30, r2
    16ae:	e0 80       	ld	r14, Z
    16b0:	f1 80       	ldd	r15, Z+1	; 0x01
    16b2:	02 81       	ldd	r16, Z+2	; 0x02
    16b4:	13 81       	ldd	r17, Z+3	; 0x03
    16b6:	c8 01       	movw	r24, r16
    16b8:	b7 01       	movw	r22, r14
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	51 e4       	ldi	r21, 0x41	; 65
    16c2:	db d0       	rcall	.+438    	; 0x187a <__subsf3>
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	c4 01       	movw	r24, r8
    16ca:	b3 01       	movw	r22, r6
    16cc:	22 d2       	rcall	.+1092   	; 0x1b12 <__gesf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	0c f0       	brlt	.+2      	; 0x16d4 <reset_sword+0x74>
    16d2:	37 c0       	rjmp	.+110    	; 0x1742 <reset_sword+0xe2>
    16d4:	c8 01       	movw	r24, r16
    16d6:	b7 01       	movw	r22, r14
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	cd d0       	rcall	.+410    	; 0x187c <__addsf3>
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	c4 01       	movw	r24, r8
    16e8:	b3 01       	movw	r22, r6
    16ea:	2c d1       	rcall	.+600    	; 0x1944 <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <reset_sword+0xe2>
    16f0:	be 01       	movw	r22, r28
    16f2:	88 27       	eor	r24, r24
    16f4:	77 fd       	sbrc	r23, 7
    16f6:	80 95       	com	r24
    16f8:	98 2f       	mov	r25, r24
    16fa:	5b d1       	rcall	.+694    	; 0x19b2 <__floatsisf>
    16fc:	5b 01       	movw	r10, r22
    16fe:	6c 01       	movw	r12, r24
    1700:	f1 01       	movw	r30, r2
    1702:	e4 80       	ldd	r14, Z+4	; 0x04
    1704:	f5 80       	ldd	r15, Z+5	; 0x05
    1706:	06 81       	ldd	r16, Z+6	; 0x06
    1708:	17 81       	ldd	r17, Z+7	; 0x07
    170a:	c8 01       	movw	r24, r16
    170c:	b7 01       	movw	r22, r14
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	b1 d0       	rcall	.+354    	; 0x187a <__subsf3>
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	c6 01       	movw	r24, r12
    171e:	b5 01       	movw	r22, r10
    1720:	f8 d1       	rcall	.+1008   	; 0x1b12 <__gesf2>
    1722:	18 16       	cp	r1, r24
    1724:	74 f4       	brge	.+28     	; 0x1742 <reset_sword+0xe2>
    1726:	c8 01       	movw	r24, r16
    1728:	b7 01       	movw	r22, r14
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	a4 d0       	rcall	.+328    	; 0x187c <__addsf3>
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	c6 01       	movw	r24, r12
    173a:	b5 01       	movw	r22, r10
    173c:	03 d1       	rcall	.+518    	; 0x1944 <__cmpsf2>
    173e:	87 fd       	sbrc	r24, 7
    1740:	a3 cf       	rjmp	.-186    	; 0x1688 <reset_sword+0x28>
		xrndm = rand() % (LCD_X - 3);
		yrndm = rand() % (LCD_Y - 3);
	}
	sword->x = xrndm;
    1742:	f2 01       	movw	r30, r4
    1744:	60 82       	st	Z, r6
    1746:	71 82       	std	Z+1, r7	; 0x01
    1748:	82 82       	std	Z+2, r8	; 0x02
    174a:	93 82       	std	Z+3, r9	; 0x03
	sword->y = yrndm;
    174c:	be 01       	movw	r22, r28
    174e:	88 27       	eor	r24, r24
    1750:	77 fd       	sbrc	r23, 7
    1752:	80 95       	com	r24
    1754:	98 2f       	mov	r25, r24
    1756:	2d d1       	rcall	.+602    	; 0x19b2 <__floatsisf>
    1758:	f2 01       	movw	r30, r4
    175a:	64 83       	std	Z+4, r22	; 0x04
    175c:	75 83       	std	Z+5, r23	; 0x05
    175e:	86 83       	std	Z+6, r24	; 0x06
    1760:	97 83       	std	Z+7, r25	; 0x07
	sword->is_visible = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	82 87       	std	Z+10, r24	; 0x0a
	draw_sprite(sword);
    1766:	c2 01       	movw	r24, r4
    1768:	31 d3       	rcall	.+1634   	; 0x1dcc <draw_sprite>
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	3f 90       	pop	r3
    178c:	2f 90       	pop	r2
    178e:	08 95       	ret

00001790 <check_z_death>:
	else {
		has_gren = true;
	}
	return has_gren;
}
void check_z_death(Sprite *sword, Sprite *zombie[num_zombies]){
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	7c 01       	movw	r14, r24
    17a2:	6b 01       	movw	r12, r22
    17a4:	00 e0       	ldi	r16, 0x00	; 0
    17a6:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < 8; i++){
		if ((abs(sword->x - zombie[i]->x) < 3) && ((abs(sword->y - zombie[i]->y)) < 3)){
    17a8:	f6 01       	movw	r30, r12
    17aa:	e0 0f       	add	r30, r16
    17ac:	f1 1f       	adc	r31, r17
    17ae:	c0 81       	ld	r28, Z
    17b0:	d1 81       	ldd	r29, Z+1	; 0x01
    17b2:	f7 01       	movw	r30, r14
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	28 81       	ld	r18, Y
    17be:	39 81       	ldd	r19, Y+1	; 0x01
    17c0:	4a 81       	ldd	r20, Y+2	; 0x02
    17c2:	5b 81       	ldd	r21, Y+3	; 0x03
    17c4:	5a d0       	rcall	.+180    	; 0x187a <__subsf3>
    17c6:	c2 d0       	rcall	.+388    	; 0x194c <__fixsfsi>
    17c8:	6e 5f       	subi	r22, 0xFE	; 254
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	65 30       	cpi	r22, 0x05	; 5
    17ce:	71 05       	cpc	r23, r1
    17d0:	90 f4       	brcc	.+36     	; 0x17f6 <check_z_death+0x66>
    17d2:	f7 01       	movw	r30, r14
    17d4:	64 81       	ldd	r22, Z+4	; 0x04
    17d6:	75 81       	ldd	r23, Z+5	; 0x05
    17d8:	86 81       	ldd	r24, Z+6	; 0x06
    17da:	97 81       	ldd	r25, Z+7	; 0x07
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	4e 81       	ldd	r20, Y+6	; 0x06
    17e2:	5f 81       	ldd	r21, Y+7	; 0x07
    17e4:	4a d0       	rcall	.+148    	; 0x187a <__subsf3>
    17e6:	b2 d0       	rcall	.+356    	; 0x194c <__fixsfsi>
    17e8:	6e 5f       	subi	r22, 0xFE	; 254
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	65 30       	cpi	r22, 0x05	; 5
    17ee:	71 05       	cpc	r23, r1
    17f0:	10 f4       	brcc	.+4      	; 0x17f6 <check_z_death+0x66>
			zombie_death(zombie[i]);
    17f2:	ce 01       	movw	r24, r28
    17f4:	3f dc       	rcall	.-1922   	; 0x1074 <zombie_death>
    17f6:	0e 5f       	subi	r16, 0xFE	; 254
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
		has_gren = true;
	}
	return has_gren;
}
void check_z_death(Sprite *sword, Sprite *zombie[num_zombies]){
	for (int i=0; i < 8; i++){
    17fa:	00 31       	cpi	r16, 0x10	; 16
    17fc:	11 05       	cpc	r17, r1
    17fe:	a1 f6       	brne	.-88     	; 0x17a8 <check_z_death+0x18>
		if ((abs(sword->x - zombie[i]->x) < 3) && ((abs(sword->y - zombie[i]->y)) < 3)){
			zombie_death(zombie[i]);
		}
	}
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	08 95       	ret

00001812 <check_sword>:
		else if (player->dx == 0 && player->dy == 1){ //DOWN
		sword->x = player->x;
		sword->y = player->y + 3;
	}
}
bool check_sword(Sprite *sword, Sprite *player, bool has_sword){
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	8c 01       	movw	r16, r24
    181c:	eb 01       	movw	r28, r22
	bool has_sword_1 = false;
	if (has_sword == false){
    181e:	44 23       	and	r20, r20
    1820:	21 f5       	brne	.+72     	; 0x186a <check_sword+0x58>
		if ((abs(player->x - sword->x) < 3) && ((abs(player->y - sword->y)) < 3)){
    1822:	68 81       	ld	r22, Y
    1824:	79 81       	ldd	r23, Y+1	; 0x01
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	f8 01       	movw	r30, r16
    182c:	20 81       	ld	r18, Z
    182e:	31 81       	ldd	r19, Z+1	; 0x01
    1830:	42 81       	ldd	r20, Z+2	; 0x02
    1832:	53 81       	ldd	r21, Z+3	; 0x03
    1834:	22 d0       	rcall	.+68     	; 0x187a <__subsf3>
    1836:	8a d0       	rcall	.+276    	; 0x194c <__fixsfsi>
    1838:	6e 5f       	subi	r22, 0xFE	; 254
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	65 30       	cpi	r22, 0x05	; 5
    183e:	71 05       	cpc	r23, r1
    1840:	b0 f4       	brcc	.+44     	; 0x186e <check_sword+0x5c>
    1842:	6c 81       	ldd	r22, Y+4	; 0x04
    1844:	7d 81       	ldd	r23, Y+5	; 0x05
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	f8 01       	movw	r30, r16
    184c:	24 81       	ldd	r18, Z+4	; 0x04
    184e:	35 81       	ldd	r19, Z+5	; 0x05
    1850:	46 81       	ldd	r20, Z+6	; 0x06
    1852:	57 81       	ldd	r21, Z+7	; 0x07
    1854:	12 d0       	rcall	.+36     	; 0x187a <__subsf3>
    1856:	7a d0       	rcall	.+244    	; 0x194c <__fixsfsi>
    1858:	6e 5f       	subi	r22, 0xFE	; 254
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	65 30       	cpi	r22, 0x05	; 5
    185e:	71 05       	cpc	r23, r1
    1860:	30 f4       	brcc	.+12     	; 0x186e <check_sword+0x5c>
				has_sword_1 = true;
				increase_score(3);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 76 01 	call	0x2ec	; 0x2ec <increase_score>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <check_sword+0x5e>
    186e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		has_sword_1 = true;
	}
	return has_sword_1;
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <__subsf3>:
    187a:	50 58       	subi	r21, 0x80	; 128

0000187c <__addsf3>:
    187c:	bb 27       	eor	r27, r27
    187e:	aa 27       	eor	r26, r26
    1880:	0e d0       	rcall	.+28     	; 0x189e <__addsf3x>
    1882:	0d c1       	rjmp	.+538    	; 0x1a9e <__fp_round>
    1884:	fe d0       	rcall	.+508    	; 0x1a82 <__fp_pscA>
    1886:	30 f0       	brcs	.+12     	; 0x1894 <__addsf3+0x18>
    1888:	03 d1       	rcall	.+518    	; 0x1a90 <__fp_pscB>
    188a:	20 f0       	brcs	.+8      	; 0x1894 <__addsf3+0x18>
    188c:	31 f4       	brne	.+12     	; 0x189a <__addsf3+0x1e>
    188e:	9f 3f       	cpi	r25, 0xFF	; 255
    1890:	11 f4       	brne	.+4      	; 0x1896 <__addsf3+0x1a>
    1892:	1e f4       	brtc	.+6      	; 0x189a <__addsf3+0x1e>
    1894:	f3 c0       	rjmp	.+486    	; 0x1a7c <__fp_nan>
    1896:	0e f4       	brtc	.+2      	; 0x189a <__addsf3+0x1e>
    1898:	e0 95       	com	r30
    189a:	e7 fb       	bst	r30, 7
    189c:	e9 c0       	rjmp	.+466    	; 0x1a70 <__fp_inf>

0000189e <__addsf3x>:
    189e:	e9 2f       	mov	r30, r25
    18a0:	0f d1       	rcall	.+542    	; 0x1ac0 <__fp_split3>
    18a2:	80 f3       	brcs	.-32     	; 0x1884 <__addsf3+0x8>
    18a4:	ba 17       	cp	r27, r26
    18a6:	62 07       	cpc	r22, r18
    18a8:	73 07       	cpc	r23, r19
    18aa:	84 07       	cpc	r24, r20
    18ac:	95 07       	cpc	r25, r21
    18ae:	18 f0       	brcs	.+6      	; 0x18b6 <__addsf3x+0x18>
    18b0:	71 f4       	brne	.+28     	; 0x18ce <__addsf3x+0x30>
    18b2:	9e f5       	brtc	.+102    	; 0x191a <__addsf3x+0x7c>
    18b4:	27 c1       	rjmp	.+590    	; 0x1b04 <__fp_zero>
    18b6:	0e f4       	brtc	.+2      	; 0x18ba <__addsf3x+0x1c>
    18b8:	e0 95       	com	r30
    18ba:	0b 2e       	mov	r0, r27
    18bc:	ba 2f       	mov	r27, r26
    18be:	a0 2d       	mov	r26, r0
    18c0:	0b 01       	movw	r0, r22
    18c2:	b9 01       	movw	r22, r18
    18c4:	90 01       	movw	r18, r0
    18c6:	0c 01       	movw	r0, r24
    18c8:	ca 01       	movw	r24, r20
    18ca:	a0 01       	movw	r20, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	ff 27       	eor	r31, r31
    18d0:	59 1b       	sub	r21, r25
    18d2:	99 f0       	breq	.+38     	; 0x18fa <__addsf3x+0x5c>
    18d4:	59 3f       	cpi	r21, 0xF9	; 249
    18d6:	50 f4       	brcc	.+20     	; 0x18ec <__addsf3x+0x4e>
    18d8:	50 3e       	cpi	r21, 0xE0	; 224
    18da:	68 f1       	brcs	.+90     	; 0x1936 <__addsf3x+0x98>
    18dc:	1a 16       	cp	r1, r26
    18de:	f0 40       	sbci	r31, 0x00	; 0
    18e0:	a2 2f       	mov	r26, r18
    18e2:	23 2f       	mov	r18, r19
    18e4:	34 2f       	mov	r19, r20
    18e6:	44 27       	eor	r20, r20
    18e8:	58 5f       	subi	r21, 0xF8	; 248
    18ea:	f3 cf       	rjmp	.-26     	; 0x18d2 <__addsf3x+0x34>
    18ec:	46 95       	lsr	r20
    18ee:	37 95       	ror	r19
    18f0:	27 95       	ror	r18
    18f2:	a7 95       	ror	r26
    18f4:	f0 40       	sbci	r31, 0x00	; 0
    18f6:	53 95       	inc	r21
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <__addsf3x+0x4e>
    18fa:	7e f4       	brtc	.+30     	; 0x191a <__addsf3x+0x7c>
    18fc:	1f 16       	cp	r1, r31
    18fe:	ba 0b       	sbc	r27, r26
    1900:	62 0b       	sbc	r22, r18
    1902:	73 0b       	sbc	r23, r19
    1904:	84 0b       	sbc	r24, r20
    1906:	ba f0       	brmi	.+46     	; 0x1936 <__addsf3x+0x98>
    1908:	91 50       	subi	r25, 0x01	; 1
    190a:	a1 f0       	breq	.+40     	; 0x1934 <__addsf3x+0x96>
    190c:	ff 0f       	add	r31, r31
    190e:	bb 1f       	adc	r27, r27
    1910:	66 1f       	adc	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	c2 f7       	brpl	.-16     	; 0x1908 <__addsf3x+0x6a>
    1918:	0e c0       	rjmp	.+28     	; 0x1936 <__addsf3x+0x98>
    191a:	ba 0f       	add	r27, r26
    191c:	62 1f       	adc	r22, r18
    191e:	73 1f       	adc	r23, r19
    1920:	84 1f       	adc	r24, r20
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__addsf3x+0x98>
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	b7 95       	ror	r27
    192c:	f7 95       	ror	r31
    192e:	9e 3f       	cpi	r25, 0xFE	; 254
    1930:	08 f0       	brcs	.+2      	; 0x1934 <__addsf3x+0x96>
    1932:	b3 cf       	rjmp	.-154    	; 0x189a <__addsf3+0x1e>
    1934:	93 95       	inc	r25
    1936:	88 0f       	add	r24, r24
    1938:	08 f0       	brcs	.+2      	; 0x193c <__addsf3x+0x9e>
    193a:	99 27       	eor	r25, r25
    193c:	ee 0f       	add	r30, r30
    193e:	97 95       	ror	r25
    1940:	87 95       	ror	r24
    1942:	08 95       	ret

00001944 <__cmpsf2>:
    1944:	71 d0       	rcall	.+226    	; 0x1a28 <__fp_cmp>
    1946:	08 f4       	brcc	.+2      	; 0x194a <__cmpsf2+0x6>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	08 95       	ret

0000194c <__fixsfsi>:
    194c:	04 d0       	rcall	.+8      	; 0x1956 <__fixunssfsi>
    194e:	68 94       	set
    1950:	b1 11       	cpse	r27, r1
    1952:	d9 c0       	rjmp	.+434    	; 0x1b06 <__fp_szero>
    1954:	08 95       	ret

00001956 <__fixunssfsi>:
    1956:	bc d0       	rcall	.+376    	; 0x1ad0 <__fp_splitA>
    1958:	88 f0       	brcs	.+34     	; 0x197c <__fixunssfsi+0x26>
    195a:	9f 57       	subi	r25, 0x7F	; 127
    195c:	90 f0       	brcs	.+36     	; 0x1982 <__fixunssfsi+0x2c>
    195e:	b9 2f       	mov	r27, r25
    1960:	99 27       	eor	r25, r25
    1962:	b7 51       	subi	r27, 0x17	; 23
    1964:	a0 f0       	brcs	.+40     	; 0x198e <__fixunssfsi+0x38>
    1966:	d1 f0       	breq	.+52     	; 0x199c <__fixunssfsi+0x46>
    1968:	66 0f       	add	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	88 1f       	adc	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	1a f0       	brmi	.+6      	; 0x1978 <__fixunssfsi+0x22>
    1972:	ba 95       	dec	r27
    1974:	c9 f7       	brne	.-14     	; 0x1968 <__fixunssfsi+0x12>
    1976:	12 c0       	rjmp	.+36     	; 0x199c <__fixunssfsi+0x46>
    1978:	b1 30       	cpi	r27, 0x01	; 1
    197a:	81 f0       	breq	.+32     	; 0x199c <__fixunssfsi+0x46>
    197c:	c3 d0       	rcall	.+390    	; 0x1b04 <__fp_zero>
    197e:	b1 e0       	ldi	r27, 0x01	; 1
    1980:	08 95       	ret
    1982:	c0 c0       	rjmp	.+384    	; 0x1b04 <__fp_zero>
    1984:	67 2f       	mov	r22, r23
    1986:	78 2f       	mov	r23, r24
    1988:	88 27       	eor	r24, r24
    198a:	b8 5f       	subi	r27, 0xF8	; 248
    198c:	39 f0       	breq	.+14     	; 0x199c <__fixunssfsi+0x46>
    198e:	b9 3f       	cpi	r27, 0xF9	; 249
    1990:	cc f3       	brlt	.-14     	; 0x1984 <__fixunssfsi+0x2e>
    1992:	86 95       	lsr	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	b3 95       	inc	r27
    199a:	d9 f7       	brne	.-10     	; 0x1992 <__fixunssfsi+0x3c>
    199c:	3e f4       	brtc	.+14     	; 0x19ac <__fixunssfsi+0x56>
    199e:	90 95       	com	r25
    19a0:	80 95       	com	r24
    19a2:	70 95       	com	r23
    19a4:	61 95       	neg	r22
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	8f 4f       	sbci	r24, 0xFF	; 255
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	08 95       	ret

000019ae <__floatunsisf>:
    19ae:	e8 94       	clt
    19b0:	09 c0       	rjmp	.+18     	; 0x19c4 <__floatsisf+0x12>

000019b2 <__floatsisf>:
    19b2:	97 fb       	bst	r25, 7
    19b4:	3e f4       	brtc	.+14     	; 0x19c4 <__floatsisf+0x12>
    19b6:	90 95       	com	r25
    19b8:	80 95       	com	r24
    19ba:	70 95       	com	r23
    19bc:	61 95       	neg	r22
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	8f 4f       	sbci	r24, 0xFF	; 255
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	99 23       	and	r25, r25
    19c6:	a9 f0       	breq	.+42     	; 0x19f2 <__floatsisf+0x40>
    19c8:	f9 2f       	mov	r31, r25
    19ca:	96 e9       	ldi	r25, 0x96	; 150
    19cc:	bb 27       	eor	r27, r27
    19ce:	93 95       	inc	r25
    19d0:	f6 95       	lsr	r31
    19d2:	87 95       	ror	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	b7 95       	ror	r27
    19da:	f1 11       	cpse	r31, r1
    19dc:	f8 cf       	rjmp	.-16     	; 0x19ce <__floatsisf+0x1c>
    19de:	fa f4       	brpl	.+62     	; 0x1a1e <__floatsisf+0x6c>
    19e0:	bb 0f       	add	r27, r27
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <__floatsisf+0x36>
    19e4:	60 ff       	sbrs	r22, 0
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <__floatsisf+0x6c>
    19e8:	6f 5f       	subi	r22, 0xFF	; 255
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	8f 4f       	sbci	r24, 0xFF	; 255
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	16 c0       	rjmp	.+44     	; 0x1a1e <__floatsisf+0x6c>
    19f2:	88 23       	and	r24, r24
    19f4:	11 f0       	breq	.+4      	; 0x19fa <__floatsisf+0x48>
    19f6:	96 e9       	ldi	r25, 0x96	; 150
    19f8:	11 c0       	rjmp	.+34     	; 0x1a1c <__floatsisf+0x6a>
    19fa:	77 23       	and	r23, r23
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <__floatsisf+0x54>
    19fe:	9e e8       	ldi	r25, 0x8E	; 142
    1a00:	87 2f       	mov	r24, r23
    1a02:	76 2f       	mov	r23, r22
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <__floatsisf+0x5e>
    1a06:	66 23       	and	r22, r22
    1a08:	71 f0       	breq	.+28     	; 0x1a26 <__floatsisf+0x74>
    1a0a:	96 e8       	ldi	r25, 0x86	; 134
    1a0c:	86 2f       	mov	r24, r22
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	2a f0       	brmi	.+10     	; 0x1a1e <__floatsisf+0x6c>
    1a14:	9a 95       	dec	r25
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	da f7       	brpl	.-10     	; 0x1a14 <__floatsisf+0x62>
    1a1e:	88 0f       	add	r24, r24
    1a20:	96 95       	lsr	r25
    1a22:	87 95       	ror	r24
    1a24:	97 f9       	bld	r25, 7
    1a26:	08 95       	ret

00001a28 <__fp_cmp>:
    1a28:	99 0f       	add	r25, r25
    1a2a:	00 08       	sbc	r0, r0
    1a2c:	55 0f       	add	r21, r21
    1a2e:	aa 0b       	sbc	r26, r26
    1a30:	e0 e8       	ldi	r30, 0x80	; 128
    1a32:	fe ef       	ldi	r31, 0xFE	; 254
    1a34:	16 16       	cp	r1, r22
    1a36:	17 06       	cpc	r1, r23
    1a38:	e8 07       	cpc	r30, r24
    1a3a:	f9 07       	cpc	r31, r25
    1a3c:	c0 f0       	brcs	.+48     	; 0x1a6e <__fp_cmp+0x46>
    1a3e:	12 16       	cp	r1, r18
    1a40:	13 06       	cpc	r1, r19
    1a42:	e4 07       	cpc	r30, r20
    1a44:	f5 07       	cpc	r31, r21
    1a46:	98 f0       	brcs	.+38     	; 0x1a6e <__fp_cmp+0x46>
    1a48:	62 1b       	sub	r22, r18
    1a4a:	73 0b       	sbc	r23, r19
    1a4c:	84 0b       	sbc	r24, r20
    1a4e:	95 0b       	sbc	r25, r21
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <__fp_cmp+0x38>
    1a52:	0a 26       	eor	r0, r26
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <__fp_cmp+0x46>
    1a56:	23 2b       	or	r18, r19
    1a58:	24 2b       	or	r18, r20
    1a5a:	25 2b       	or	r18, r21
    1a5c:	21 f4       	brne	.+8      	; 0x1a66 <__fp_cmp+0x3e>
    1a5e:	08 95       	ret
    1a60:	0a 26       	eor	r0, r26
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <__fp_cmp+0x3e>
    1a64:	a1 40       	sbci	r26, 0x01	; 1
    1a66:	a6 95       	lsr	r26
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	81 1d       	adc	r24, r1
    1a6c:	81 1d       	adc	r24, r1
    1a6e:	08 95       	ret

00001a70 <__fp_inf>:
    1a70:	97 f9       	bld	r25, 7
    1a72:	9f 67       	ori	r25, 0x7F	; 127
    1a74:	80 e8       	ldi	r24, 0x80	; 128
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	08 95       	ret

00001a7c <__fp_nan>:
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	80 ec       	ldi	r24, 0xC0	; 192
    1a80:	08 95       	ret

00001a82 <__fp_pscA>:
    1a82:	00 24       	eor	r0, r0
    1a84:	0a 94       	dec	r0
    1a86:	16 16       	cp	r1, r22
    1a88:	17 06       	cpc	r1, r23
    1a8a:	18 06       	cpc	r1, r24
    1a8c:	09 06       	cpc	r0, r25
    1a8e:	08 95       	ret

00001a90 <__fp_pscB>:
    1a90:	00 24       	eor	r0, r0
    1a92:	0a 94       	dec	r0
    1a94:	12 16       	cp	r1, r18
    1a96:	13 06       	cpc	r1, r19
    1a98:	14 06       	cpc	r1, r20
    1a9a:	05 06       	cpc	r0, r21
    1a9c:	08 95       	ret

00001a9e <__fp_round>:
    1a9e:	09 2e       	mov	r0, r25
    1aa0:	03 94       	inc	r0
    1aa2:	00 0c       	add	r0, r0
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <__fp_round+0xc>
    1aa6:	88 23       	and	r24, r24
    1aa8:	52 f0       	brmi	.+20     	; 0x1abe <__fp_round+0x20>
    1aaa:	bb 0f       	add	r27, r27
    1aac:	40 f4       	brcc	.+16     	; 0x1abe <__fp_round+0x20>
    1aae:	bf 2b       	or	r27, r31
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <__fp_round+0x18>
    1ab2:	60 ff       	sbrs	r22, 0
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <__fp_round+0x20>
    1ab6:	6f 5f       	subi	r22, 0xFF	; 255
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	8f 4f       	sbci	r24, 0xFF	; 255
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	08 95       	ret

00001ac0 <__fp_split3>:
    1ac0:	57 fd       	sbrc	r21, 7
    1ac2:	90 58       	subi	r25, 0x80	; 128
    1ac4:	44 0f       	add	r20, r20
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <__fp_splitA+0x10>
    1aca:	5f 3f       	cpi	r21, 0xFF	; 255
    1acc:	71 f0       	breq	.+28     	; 0x1aea <__fp_splitA+0x1a>
    1ace:	47 95       	ror	r20

00001ad0 <__fp_splitA>:
    1ad0:	88 0f       	add	r24, r24
    1ad2:	97 fb       	bst	r25, 7
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <__fp_splitA+0x20>
    1ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    1ada:	79 f0       	breq	.+30     	; 0x1afa <__fp_splitA+0x2a>
    1adc:	87 95       	ror	r24
    1ade:	08 95       	ret
    1ae0:	12 16       	cp	r1, r18
    1ae2:	13 06       	cpc	r1, r19
    1ae4:	14 06       	cpc	r1, r20
    1ae6:	55 1f       	adc	r21, r21
    1ae8:	f2 cf       	rjmp	.-28     	; 0x1ace <__fp_split3+0xe>
    1aea:	46 95       	lsr	r20
    1aec:	f1 df       	rcall	.-30     	; 0x1ad0 <__fp_splitA>
    1aee:	08 c0       	rjmp	.+16     	; 0x1b00 <__fp_splitA+0x30>
    1af0:	16 16       	cp	r1, r22
    1af2:	17 06       	cpc	r1, r23
    1af4:	18 06       	cpc	r1, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	f1 cf       	rjmp	.-30     	; 0x1adc <__fp_splitA+0xc>
    1afa:	86 95       	lsr	r24
    1afc:	71 05       	cpc	r23, r1
    1afe:	61 05       	cpc	r22, r1
    1b00:	08 94       	sec
    1b02:	08 95       	ret

00001b04 <__fp_zero>:
    1b04:	e8 94       	clt

00001b06 <__fp_szero>:
    1b06:	bb 27       	eor	r27, r27
    1b08:	66 27       	eor	r22, r22
    1b0a:	77 27       	eor	r23, r23
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	97 f9       	bld	r25, 7
    1b10:	08 95       	ret

00001b12 <__gesf2>:
    1b12:	8a df       	rcall	.-236    	; 0x1a28 <__fp_cmp>
    1b14:	08 f4       	brcc	.+2      	; 0x1b18 <__gesf2+0x6>
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <clear>:
		LCDWrite(LCD_D, screenBuffer[i]);
	}
	
}

void clear(void) {
    1b1a:	e3 ee       	ldi	r30, 0xE3	; 227
    1b1c:	f1 e0       	ldi	r31, 0x01	; 1
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
		 screenBuffer[i] = 0;
    1b1e:	11 92       	st	Z+, r1
	
}

void clear(void) {
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	eb 3d       	cpi	r30, 0xDB	; 219
    1b24:	f8 07       	cpc	r31, r24
    1b26:	d9 f7       	brne	.-10     	; 0x1b1e <clear+0x4>
		 screenBuffer[i] = 0;
	}
}
    1b28:	08 95       	ret

00001b2a <set_pixel>:
void set_pixel(unsigned char x, unsigned char y, unsigned char value){
	// Sanity check (bad things happen otherwise...)
	if (x >= LCD_X || y >= LCD_Y) {
    1b2a:	84 35       	cpi	r24, 0x54	; 84
    1b2c:	80 f5       	brcc	.+96     	; 0x1b8e <set_pixel+0x64>
    1b2e:	60 33       	cpi	r22, 0x30	; 48
    1b30:	70 f5       	brcc	.+92     	; 0x1b8e <set_pixel+0x64>
		return;
	}

	// Calculate the pixel 'subrow', within that LCD row
	unsigned char row = y/8;
    1b32:	26 2f       	mov	r18, r22
    1b34:	26 95       	lsr	r18
    1b36:	26 95       	lsr	r18
    1b38:	26 95       	lsr	r18
	unsigned char subrow = y%8;
    1b3a:	67 70       	andi	r22, 0x07	; 7
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
	
	// Set that particular pixel in our screen buffer
	if (value){
    1b3e:	44 23       	and	r20, r20
    1b40:	99 f0       	breq	.+38     	; 0x1b68 <set_pixel+0x3e>
		screenBuffer[row*84+x] |= (1 << subrow); //Set Pixel 
    1b42:	e4 e5       	ldi	r30, 0x54	; 84
    1b44:	2e 9f       	mul	r18, r30
    1b46:	f0 01       	movw	r30, r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	e8 0f       	add	r30, r24
    1b4c:	f9 1f       	adc	r31, r25
    1b4e:	ed 51       	subi	r30, 0x1D	; 29
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <set_pixel+0x32>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	6a 95       	dec	r22
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <set_pixel+0x2e>
    1b60:	20 81       	ld	r18, Z
    1b62:	28 2b       	or	r18, r24
    1b64:	20 83       	st	Z, r18
    1b66:	08 95       	ret
	} else {
		screenBuffer[row*84+x] &= ~(1 << subrow); //Clear Pixel
    1b68:	e4 e5       	ldi	r30, 0x54	; 84
    1b6a:	2e 9f       	mul	r18, r30
    1b6c:	f0 01       	movw	r30, r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	e8 0f       	add	r30, r24
    1b72:	f9 1f       	adc	r31, r25
    1b74:	ed 51       	subi	r30, 0x1D	; 29
    1b76:	fe 4f       	sbci	r31, 0xFE	; 254
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <set_pixel+0x58>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	6a 95       	dec	r22
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <set_pixel+0x54>
    1b86:	80 95       	com	r24
    1b88:	20 81       	ld	r18, Z
    1b8a:	28 23       	and	r18, r24
    1b8c:	20 83       	st	Z, r18
    1b8e:	08 95       	ret

00001b90 <draw_y_line>:
	}
}
void draw_y_line(unsigned char x, unsigned char y1, unsigned char y2){
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	f8 2e       	mov	r15, r24
    1b98:	04 2f       	mov	r16, r20
    1b9a:	16 2f       	mov	r17, r22
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <draw_y_line+0x18>
	unsigned char i;
	for (i = y1; i <= y2; i++){
		set_pixel(x, i, 1);
    1b9e:	8f 2d       	mov	r24, r15
    1ba0:	61 2f       	mov	r22, r17
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	c2 df       	rcall	.-124    	; 0x1b2a <set_pixel>
		screenBuffer[row*84+x] &= ~(1 << subrow); //Clear Pixel
	}
}
void draw_y_line(unsigned char x, unsigned char y1, unsigned char y2){
	unsigned char i;
	for (i = y1; i <= y2; i++){
    1ba6:	1f 5f       	subi	r17, 0xFF	; 255
    1ba8:	01 17       	cp	r16, r17
    1baa:	c8 f7       	brcc	.-14     	; 0x1b9e <draw_y_line+0xe>
		set_pixel(x, i, 1);
	}
}
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	08 95       	ret

00001bb4 <draw_x_line>:
void draw_x_line(unsigned char y, unsigned char x1, unsigned char x2){
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	f8 2e       	mov	r15, r24
    1bbc:	04 2f       	mov	r16, r20
    1bbe:	16 2f       	mov	r17, r22
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <draw_x_line+0x18>
	unsigned char i;
	for (i = x1; i <= x2; i++){
		set_pixel(i, y, 1);
    1bc2:	81 2f       	mov	r24, r17
    1bc4:	6f 2d       	mov	r22, r15
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	b0 df       	rcall	.-160    	; 0x1b2a <set_pixel>
		set_pixel(x, i, 1);
	}
}
void draw_x_line(unsigned char y, unsigned char x1, unsigned char x2){
	unsigned char i;
	for (i = x1; i <= x2; i++){
    1bca:	1f 5f       	subi	r17, 0xFF	; 255
    1bcc:	01 17       	cp	r16, r17
    1bce:	c8 f7       	brcc	.-14     	; 0x1bc2 <draw_x_line+0xe>
		set_pixel(i, y, 1);
	}
}
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	08 95       	ret

00001bd8 <draw_character>:
			}
		}
	}
}

void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
    1bd8:	8f 92       	push	r8
    1bda:	9f 92       	push	r9
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	d6 2e       	mov	r13, r22
    1bf2:	c4 2e       	mov	r12, r20
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    1bf4:	95 e0       	ldi	r25, 0x05	; 5
    1bf6:	89 9f       	mul	r24, r25
    1bf8:	c0 01       	movw	r24, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	8c 01       	movw	r16, r24
    1bfe:	04 5f       	subi	r16, 0xF4	; 244
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	f1 e0       	ldi	r31, 0x01	; 1
    1c04:	8f 2e       	mov	r8, r31
    1c06:	91 2c       	mov	r9, r1
	int i, j;
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
    1c08:	e1 e1       	ldi	r30, 0x11	; 17
    1c0a:	ae 2e       	mov	r10, r30
    1c0c:	e0 e0       	ldi	r30, 0x00	; 0
    1c0e:	be 2e       	mov	r11, r30
    1c10:	a8 0e       	add	r10, r24
    1c12:	b9 1e       	adc	r11, r25
    1c14:	1d c0       	rjmp	.+58     	; 0x1c50 <draw_character+0x78>
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    1c16:	6c 2d       	mov	r22, r12
    1c18:	6c 0f       	add	r22, r28
    1c1a:	a4 01       	movw	r20, r8
    1c1c:	0c 2e       	mov	r0, r28
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <draw_character+0x4c>
    1c20:	44 0f       	add	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <draw_character+0x48>
    1c28:	4e 21       	and	r20, r14
    1c2a:	5f 21       	and	r21, r15
    1c2c:	0c 2e       	mov	r0, r28
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <draw_character+0x5c>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <draw_character+0x58>
    1c38:	8d 2d       	mov	r24, r13
    1c3a:	77 df       	rcall	.-274    	; 0x1b2a <set_pixel>
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
		for (j = 0; j<char_height; j++) {
    1c3c:	21 96       	adiw	r28, 0x01	; 1
    1c3e:	c8 30       	cpi	r28, 0x08	; 8
    1c40:	d1 05       	cpc	r29, r1
    1c42:	49 f7       	brne	.-46     	; 0x1c16 <draw_character+0x3e>
    1c44:	0f 5f       	subi	r16, 0xFF	; 255
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	d3 94       	inc	r13
	int i, j;
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
    1c4a:	0a 15       	cp	r16, r10
    1c4c:	1b 05       	cpc	r17, r11
    1c4e:	39 f0       	breq	.+14     	; 0x1c5e <draw_character+0x86>
    1c50:	c0 e0       	ldi	r28, 0x00	; 0
    1c52:	d0 e0       	ldi	r29, 0x00	; 0
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    1c54:	f8 01       	movw	r30, r16
    1c56:	84 91       	lpm	r24, Z+
    1c58:	e8 2e       	mov	r14, r24
    1c5a:	ff 24       	eor	r15, r15
    1c5c:	dc cf       	rjmp	.-72     	; 0x1c16 <draw_character+0x3e>
		}
	}
}
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	bf 90       	pop	r11
    1c70:	af 90       	pop	r10
    1c72:	9f 90       	pop	r9
    1c74:	8f 90       	pop	r8
    1c76:	08 95       	ret

00001c78 <draw_string>:

void draw_string( char *characters, unsigned char top_left_x, unsigned char top_left_y ) {
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	ec 01       	movw	r28, r24
    1c82:	16 2f       	mov	r17, r22
    1c84:	04 2f       	mov	r16, r20
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <draw_string+0x1a>
	int i = 0;
	while (*characters != 0) {
		draw_character(*(characters), top_left_x+i*5, top_left_y);
    1c88:	61 2f       	mov	r22, r17
    1c8a:	40 2f       	mov	r20, r16
    1c8c:	a5 df       	rcall	.-182    	; 0x1bd8 <draw_character>
		// Add a column of spaces here if you want to space out the lettering.
	    // See lcd.c for a hint on how to do this.
		characters++;
    1c8e:	21 96       	adiw	r28, 0x01	; 1
    1c90:	1b 5f       	subi	r17, 0xFB	; 251
	}
}

void draw_string( char *characters, unsigned char top_left_x, unsigned char top_left_y ) {
	int i = 0;
	while (*characters != 0) {
    1c92:	88 81       	ld	r24, Y
    1c94:	88 23       	and	r24, r24
    1c96:	c1 f7       	brne	.-16     	; 0x1c88 <draw_string+0x10>
		// Add a column of spaces here if you want to space out the lettering.
	    // See lcd.c for a hint on how to do this.
		characters++;
		i++;
	}
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <refresh>:
#include "graphics.h"
#include "lcd.h"

unsigned char screenBuffer[LCD_BUFFER_SIZE]; // Our screen buffer array

void refresh(void) {
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	55 d0       	rcall	.+170    	; 0x1d56 <LCDPosition>
    1cac:	c3 ee       	ldi	r28, 0xE3	; 227
    1cae:	d1 e0       	ldi	r29, 0x01	; 1
	// Iterate through our buffer and write each byte to the LCD.
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
		LCDWrite(LCD_D, screenBuffer[i]);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	69 91       	ld	r22, Y+
    1cb4:	07 d0       	rcall	.+14     	; 0x1cc4 <LCDWrite>
void refresh(void) {
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
	// Iterate through our buffer and write each byte to the LCD.
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	cb 3d       	cpi	r28, 0xDB	; 219
    1cba:	d8 07       	cpc	r29, r24
    1cbc:	c9 f7       	brne	.-14     	; 0x1cb0 <refresh+0xe>
		LCDWrite(LCD_D, screenBuffer[i]);
	}
	
}
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <LCDWrite>:
// Include our font pixel data
#include "ascii_font.h"

void LCDWrite(unsigned char dc, unsigned char data) {
	// Set the DC pin based on the parameter 'dc' (Hint: use the OUTPUT_WRITE macro)
	OUTPUT_WRITE(PORTB,DCPIN,dc);
    1cc4:	95 b1       	in	r25, 0x05	; 5
    1cc6:	82 95       	swap	r24
    1cc8:	88 0f       	add	r24, r24
    1cca:	80 7e       	andi	r24, 0xE0	; 224
    1ccc:	9f 7d       	andi	r25, 0xDF	; 223
    1cce:	98 2b       	or	r25, r24
    1cd0:	95 b9       	out	0x05, r25	; 5
	
	// Pull the SCE/SS pin low to signal the LCD we have data
	OUTPUT_LOW(PORTD,SCEPIN);
    1cd2:	5f 98       	cbi	0x0b, 7	; 11
    1cd4:	27 e0       	ldi	r18, 0x07	; 7
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
		OUTPUT_LOW(PORTF, SCKPIN) ;
		if((data>>i) & (1 == 1)) {
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
	OUTPUT_LOW(PORTD,SCEPIN);
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
		OUTPUT_LOW(PORTF, SCKPIN) ;
    1cda:	8f 98       	cbi	0x11, 7	; 17
		if((data>>i) & (1 == 1)) {
    1cdc:	cb 01       	movw	r24, r22
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <LCDWrite+0x22>
    1ce2:	95 95       	asr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <LCDWrite+0x1e>
    1cea:	80 ff       	sbrs	r24, 0
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <LCDWrite+0x2e>
			OUTPUT_HIGH(PORTB, DINPIN);
    1cee:	2e 9a       	sbi	0x05, 6	; 5
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <LCDWrite+0x30>
		} else {
			OUTPUT_LOW(PORTB, DINPIN);
    1cf2:	2e 98       	cbi	0x05, 6	; 5
		}
		OUTPUT_HIGH(PORTF, SCKPIN);
    1cf4:	8f 9a       	sbi	0x11, 7	; 17
	// Pull the SCE/SS pin low to signal the LCD we have data
	OUTPUT_LOW(PORTD,SCEPIN);
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	30 40       	sbci	r19, 0x00	; 0
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	2f 3f       	cpi	r18, 0xFF	; 255
    1cfe:	38 07       	cpc	r19, r24
    1d00:	61 f7       	brne	.-40     	; 0x1cda <LCDWrite+0x16>
		}
		OUTPUT_HIGH(PORTF, SCKPIN);
	}
	
	// Pull SCE/SS high to signal the LCD we are done
	OUTPUT_HIGH(PORTD,SCEPIN);
    1d02:	5f 9a       	sbi	0x0b, 7	; 11
}
    1d04:	08 95       	ret

00001d06 <LCDInitialise>:

// Initialise the LCD with our desired settings
void LCDInitialise(unsigned char contrast) {
    1d06:	1f 93       	push	r17
    1d08:	18 2f       	mov	r17, r24
	SET_OUTPUT(DDRD, SCEPIN);
    1d0a:	57 9a       	sbi	0x0a, 7	; 10
	SET_OUTPUT(DDRB, RSTPIN);
    1d0c:	24 9a       	sbi	0x04, 4	; 4
	SET_OUTPUT(DDRB, DCPIN);
    1d0e:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(DDRB, DINPIN);
    1d10:	26 9a       	sbi	0x04, 6	; 4
	SET_OUTPUT(DDRF, SCKPIN);
    1d12:	87 9a       	sbi	0x10, 7	; 16
		
	OUTPUT_LOW(PORTB, RSTPIN);
    1d14:	2c 98       	cbi	0x05, 4	; 5
	OUTPUT_HIGH(PORTD, SCEPIN);
    1d16:	5f 9a       	sbi	0x0b, 7	; 11
	OUTPUT_HIGH(PORTB, RSTPIN);
    1d18:	2c 9a       	sbi	0x05, 4	; 5
  
	LCDWrite(LCD_C, 0x21); // Enable LCD extended command set
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	61 e2       	ldi	r22, 0x21	; 33
    1d1e:	d2 df       	rcall	.-92     	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, 0x80 | contrast ); // Set LCD Vop (Contrast)
    1d20:	10 68       	ori	r17, 0x80	; 128
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	61 2f       	mov	r22, r17
    1d26:	ce df       	rcall	.-100    	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, 0x04);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	64 e0       	ldi	r22, 0x04	; 4
    1d2c:	cb df       	rcall	.-106    	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, 0x13); // LCD bias mode 1:48
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	63 e1       	ldi	r22, 0x13	; 19
    1d32:	c8 df       	rcall	.-112    	; 0x1cc4 <LCDWrite>
  
	LCDWrite(LCD_C, 0x0C); // LCD in normal mode.
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	6c e0       	ldi	r22, 0x0C	; 12
    1d38:	c5 df       	rcall	.-118    	; 0x1cc4 <LCDWrite>
  	LCDWrite(LCD_C, 0x20); // Enable LCD basic command set
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	60 e2       	ldi	r22, 0x20	; 32
    1d3e:	c2 df       	rcall	.-124    	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, 0x0C);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	6c e0       	ldi	r22, 0x0C	; 12
    1d44:	bf df       	rcall	.-130    	; 0x1cc4 <LCDWrite>

	LCDWrite(LCD_C, 0x40); // Reset row to 0
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	60 e4       	ldi	r22, 0x40	; 64
    1d4a:	bc df       	rcall	.-136    	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, 0x80); // Reset column to 0
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	60 e8       	ldi	r22, 0x80	; 128
    1d50:	b9 df       	rcall	.-142    	; 0x1cc4 <LCDWrite>
}
    1d52:	1f 91       	pop	r17
    1d54:	08 95       	ret

00001d56 <LCDPosition>:
		characters++;
	}
}

// Set the position in the LCD's memory that we want to begin writing from
void LCDPosition(unsigned char x, unsigned char y) {
    1d56:	1f 93       	push	r17
    1d58:	18 2f       	mov	r17, r24
	LCDWrite(LCD_C, (0x40 | y )); // Reset row to 0
    1d5a:	60 64       	ori	r22, 0x40	; 64
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	b2 df       	rcall	.-156    	; 0x1cc4 <LCDWrite>
	LCDWrite(LCD_C, (0x80 | x )); // Reset column to 0
    1d60:	10 68       	ori	r17, 0x80	; 128
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	61 2f       	mov	r22, r17
    1d66:	ae df       	rcall	.-164    	; 0x1cc4 <LCDWrite>
    1d68:	1f 91       	pop	r17
    1d6a:	08 95       	ret

00001d6c <init_sprite>:
	byte x,
	byte y,
	byte width,
	byte height,
	byte * bitmap
	) {
    1d6c:	8f 92       	push	r8
    1d6e:	9f 92       	push	r9
    1d70:	af 92       	push	r10
    1d72:	bf 92       	push	r11
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	4c 01       	movw	r8, r24
    1d82:	a4 2e       	mov	r10, r20
    1d84:	12 2f       	mov	r17, r18
	sprite->x = x;
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	10 de       	rcall	.-992    	; 0x19ae <__floatunsisf>
    1d8e:	f4 01       	movw	r30, r8
    1d90:	60 83       	st	Z, r22
    1d92:	71 83       	std	Z+1, r23	; 0x01
    1d94:	82 83       	std	Z+2, r24	; 0x02
    1d96:	93 83       	std	Z+3, r25	; 0x03
	sprite->y = y;
    1d98:	bb 24       	eor	r11, r11
    1d9a:	cc 24       	eor	r12, r12
    1d9c:	dd 24       	eor	r13, r13
    1d9e:	c6 01       	movw	r24, r12
    1da0:	b5 01       	movw	r22, r10
    1da2:	05 de       	rcall	.-1014   	; 0x19ae <__floatunsisf>
    1da4:	f4 01       	movw	r30, r8
    1da6:	64 83       	std	Z+4, r22	; 0x04
    1da8:	75 83       	std	Z+5, r23	; 0x05
    1daa:	86 83       	std	Z+6, r24	; 0x06
    1dac:	97 83       	std	Z+7, r25	; 0x07
	sprite->width = width;
    1dae:	10 87       	std	Z+8, r17	; 0x08
	sprite->height = height;
    1db0:	01 87       	std	Z+9, r16	; 0x09
	sprite->bitmap = bitmap;
    1db2:	f4 86       	std	Z+12, r15	; 0x0c
    1db4:	e3 86       	std	Z+11, r14	; 0x0b
}
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	08 95       	ret

00001dcc <draw_sprite>:

void draw_sprite( Sprite * sprite ) {
    1dcc:	2f 92       	push	r2
    1dce:	3f 92       	push	r3
    1dd0:	4f 92       	push	r4
    1dd2:	5f 92       	push	r5
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <draw_sprite+0x24>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <draw_sprite+0x26>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	2c 01       	movw	r4, r24
	if ( !sprite->is_visible ) return;
    1df8:	dc 01       	movw	r26, r24
    1dfa:	1a 96       	adiw	r26, 0x0a	; 10
    1dfc:	8c 91       	ld	r24, X
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <draw_sprite+0x38>
    1e02:	96 c0       	rjmp	.+300    	; 0x1f30 <draw_sprite+0x164>
    1e04:	22 24       	eor	r2, r2
    1e06:	33 24       	eor	r3, r3
    1e08:	1a 82       	std	Y+2, r1	; 0x02
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	87 c0       	rjmp	.+270    	; 0x1f1c <draw_sprite+0x150>
	// Index into the bitmap. This is updated as we traverse the 
	// pixels of the image.
	int idx = 0;

	for ( int row = 0; row < sprite->height; row++ ) {
		float screen_y = sprite->y + row;
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	bf 01       	movw	r22, r30
    1e14:	88 27       	eor	r24, r24
    1e16:	77 fd       	sbrc	r23, 7
    1e18:	80 95       	com	r24
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	ca dd       	rcall	.-1132   	; 0x19b2 <__floatsisf>
    1e1e:	d2 01       	movw	r26, r4
    1e20:	14 96       	adiw	r26, 0x04	; 4
    1e22:	2d 91       	ld	r18, X+
    1e24:	3d 91       	ld	r19, X+
    1e26:	4d 91       	ld	r20, X+
    1e28:	5c 91       	ld	r21, X
    1e2a:	17 97       	sbiw	r26, 0x07	; 7
    1e2c:	27 dd       	rcall	.-1458   	; 0x187c <__addsf3>
    1e2e:	5b 01       	movw	r10, r22
    1e30:	6c 01       	movw	r12, r24

		if ( screen_y < 0 ) continue;
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	84 dd       	rcall	.-1272   	; 0x1944 <__cmpsf2>
    1e3c:	87 fd       	sbrc	r24, 7
    1e3e:	68 c0       	rjmp	.+208    	; 0x1f10 <draw_sprite+0x144>

		if ( screen_y >= LCD_Y ) break;
    1e40:	c6 01       	movw	r24, r12
    1e42:	b5 01       	movw	r22, r10
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e4       	ldi	r20, 0x40	; 64
    1e4a:	52 e4       	ldi	r21, 0x42	; 66
    1e4c:	62 de       	rcall	.-828    	; 0x1b12 <__gesf2>
    1e4e:	87 ff       	sbrs	r24, 7
    1e50:	6f c0       	rjmp	.+222    	; 0x1f30 <draw_sprite+0x164>
    1e52:	1c 82       	std	Y+4, r1	; 0x04
    1e54:	1b 82       	std	Y+3, r1	; 0x03
    1e56:	45 c0       	rjmp	.+138    	; 0x1ee2 <draw_sprite+0x116>

		int col = 0;
		int bitmask = 1 << 7;

		while ( col < sprite->width ) {
			byte pixel = sprite->bitmap[idx] & bitmask;
    1e58:	d2 01       	movw	r26, r4
    1e5a:	1b 96       	adiw	r26, 0x0b	; 11
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	1c 97       	sbiw	r26, 0x0c	; 12
    1e62:	e2 0d       	add	r30, r2
    1e64:	f3 1d       	adc	r31, r3
    1e66:	70 80       	ld	r7, Z
			float screen_x = sprite->x + col;
    1e68:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6c:	bf 01       	movw	r22, r30
    1e6e:	88 27       	eor	r24, r24
    1e70:	77 fd       	sbrc	r23, 7
    1e72:	80 95       	com	r24
    1e74:	98 2f       	mov	r25, r24
    1e76:	9d dd       	rcall	.-1222   	; 0x19b2 <__floatsisf>
    1e78:	d2 01       	movw	r26, r4
    1e7a:	2d 91       	ld	r18, X+
    1e7c:	3d 91       	ld	r19, X+
    1e7e:	4d 91       	ld	r20, X+
    1e80:	5c 91       	ld	r21, X
    1e82:	fc dc       	rcall	.-1544   	; 0x187c <__addsf3>
    1e84:	7b 01       	movw	r14, r22
    1e86:	8c 01       	movw	r16, r24

			if ( (screen_x >= 0) && ( screen_x < LCD_X ) && pixel ) {
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	40 de       	rcall	.-896    	; 0x1b12 <__gesf2>
    1e92:	88 23       	and	r24, r24
    1e94:	cc f0       	brlt	.+50     	; 0x1ec8 <draw_sprite+0xfc>
    1e96:	c8 01       	movw	r24, r16
    1e98:	b7 01       	movw	r22, r14
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	48 ea       	ldi	r20, 0xA8	; 168
    1ea0:	52 e4       	ldi	r21, 0x42	; 66
    1ea2:	50 dd       	rcall	.-1376   	; 0x1944 <__cmpsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	84 f4       	brge	.+32     	; 0x1ec8 <draw_sprite+0xfc>
    1ea8:	78 20       	and	r7, r8
    1eaa:	71 f0       	breq	.+28     	; 0x1ec8 <draw_sprite+0xfc>
				// Set pixel only if the bit is set. 0 is transparent.
				set_pixel( screen_x, screen_y, 1 );
    1eac:	c8 01       	movw	r24, r16
    1eae:	b7 01       	movw	r22, r14
    1eb0:	52 dd       	rcall	.-1372   	; 0x1956 <__fixunssfsi>
    1eb2:	7b 01       	movw	r14, r22
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	4d dd       	rcall	.-1382   	; 0x1956 <__fixunssfsi>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	8e 2d       	mov	r24, r14
    1ec2:	62 2f       	mov	r22, r18
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	31 de       	rcall	.-926    	; 0x1b2a <set_pixel>
			}

			col++;
    1ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eca:	fc 81       	ldd	r31, Y+4	; 0x04
    1ecc:	31 96       	adiw	r30, 0x01	; 1
    1ece:	fc 83       	std	Y+4, r31	; 0x04
    1ed0:	eb 83       	std	Y+3, r30	; 0x03

			if ( col % 8 == 0 ) {
    1ed2:	cf 01       	movw	r24, r30
    1ed4:	87 70       	andi	r24, 0x07	; 7
    1ed6:	90 70       	andi	r25, 0x00	; 0
    1ed8:	89 2b       	or	r24, r25
    1eda:	39 f4       	brne	.+14     	; 0x1eea <draw_sprite+0x11e>
				idx++;
    1edc:	08 94       	sec
    1ede:	21 1c       	adc	r2, r1
    1ee0:	31 1c       	adc	r3, r1
    1ee2:	90 e8       	ldi	r25, 0x80	; 128
    1ee4:	89 2e       	mov	r8, r25
    1ee6:	91 2c       	mov	r9, r1
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <draw_sprite+0x122>
				bitmask = 1 << 7;
			}
			else {
				bitmask >>= 1;
    1eea:	95 94       	asr	r9
    1eec:	87 94       	ror	r8
		if ( screen_y >= LCD_Y ) break;

		int col = 0;
		int bitmask = 1 << 7;

		while ( col < sprite->width ) {
    1eee:	d2 01       	movw	r26, r4
    1ef0:	18 96       	adiw	r26, 0x08	; 8
    1ef2:	8c 91       	ld	r24, X
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef8:	fc 81       	ldd	r31, Y+4	; 0x04
    1efa:	e8 17       	cp	r30, r24
    1efc:	f9 07       	cpc	r31, r25
    1efe:	0c f4       	brge	.+2      	; 0x1f02 <draw_sprite+0x136>
    1f00:	ab cf       	rjmp	.-170    	; 0x1e58 <draw_sprite+0x8c>
			else {
				bitmask >>= 1;
			}
		}

		if ( sprite->width % 8 != 0 ) {
    1f02:	87 70       	andi	r24, 0x07	; 7
    1f04:	90 70       	andi	r25, 0x00	; 0
    1f06:	89 2b       	or	r24, r25
    1f08:	19 f0       	breq	.+6      	; 0x1f10 <draw_sprite+0x144>
			idx++;
    1f0a:	08 94       	sec
    1f0c:	21 1c       	adc	r2, r1
    1f0e:	31 1c       	adc	r3, r1

	// Index into the bitmap. This is updated as we traverse the 
	// pixels of the image.
	int idx = 0;

	for ( int row = 0; row < sprite->height; row++ ) {
    1f10:	29 81       	ldd	r18, Y+1	; 0x01
    1f12:	3a 81       	ldd	r19, Y+2	; 0x02
    1f14:	2f 5f       	subi	r18, 0xFF	; 255
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	3a 83       	std	Y+2, r19	; 0x02
    1f1a:	29 83       	std	Y+1, r18	; 0x01
    1f1c:	d2 01       	movw	r26, r4
    1f1e:	19 96       	adiw	r26, 0x09	; 9
    1f20:	8c 91       	ld	r24, X
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	e9 81       	ldd	r30, Y+1	; 0x01
    1f26:	fa 81       	ldd	r31, Y+2	; 0x02
    1f28:	e8 17       	cp	r30, r24
    1f2a:	f9 07       	cpc	r31, r25
    1f2c:	0c f4       	brge	.+2      	; 0x1f30 <draw_sprite+0x164>
    1f2e:	6f cf       	rjmp	.-290    	; 0x1e0e <draw_sprite+0x42>

		if ( sprite->width % 8 != 0 ) {
			idx++;
		}
	}
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	9f 90       	pop	r9
    1f4e:	8f 90       	pop	r8
    1f50:	7f 90       	pop	r7
    1f52:	5f 90       	pop	r5
    1f54:	4f 90       	pop	r4
    1f56:	3f 90       	pop	r3
    1f58:	2f 90       	pop	r2
    1f5a:	08 95       	ret

00001f5c <__divmodhi4>:
    1f5c:	97 fb       	bst	r25, 7
    1f5e:	09 2e       	mov	r0, r25
    1f60:	07 26       	eor	r0, r23
    1f62:	0a d0       	rcall	.+20     	; 0x1f78 <__divmodhi4_neg1>
    1f64:	77 fd       	sbrc	r23, 7
    1f66:	04 d0       	rcall	.+8      	; 0x1f70 <__divmodhi4_neg2>
    1f68:	0c d0       	rcall	.+24     	; 0x1f82 <__udivmodhi4>
    1f6a:	06 d0       	rcall	.+12     	; 0x1f78 <__divmodhi4_neg1>
    1f6c:	00 20       	and	r0, r0
    1f6e:	1a f4       	brpl	.+6      	; 0x1f76 <__divmodhi4_exit>

00001f70 <__divmodhi4_neg2>:
    1f70:	70 95       	com	r23
    1f72:	61 95       	neg	r22
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255

00001f76 <__divmodhi4_exit>:
    1f76:	08 95       	ret

00001f78 <__divmodhi4_neg1>:
    1f78:	f6 f7       	brtc	.-4      	; 0x1f76 <__divmodhi4_exit>
    1f7a:	90 95       	com	r25
    1f7c:	81 95       	neg	r24
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	08 95       	ret

00001f82 <__udivmodhi4>:
    1f82:	aa 1b       	sub	r26, r26
    1f84:	bb 1b       	sub	r27, r27
    1f86:	51 e1       	ldi	r21, 0x11	; 17
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <__udivmodhi4_ep>

00001f8a <__udivmodhi4_loop>:
    1f8a:	aa 1f       	adc	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	a6 17       	cp	r26, r22
    1f90:	b7 07       	cpc	r27, r23
    1f92:	10 f0       	brcs	.+4      	; 0x1f98 <__udivmodhi4_ep>
    1f94:	a6 1b       	sub	r26, r22
    1f96:	b7 0b       	sbc	r27, r23

00001f98 <__udivmodhi4_ep>:
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	5a 95       	dec	r21
    1f9e:	a9 f7       	brne	.-22     	; 0x1f8a <__udivmodhi4_loop>
    1fa0:	80 95       	com	r24
    1fa2:	90 95       	com	r25
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	08 95       	ret

00001faa <__prologue_saves__>:
    1faa:	2f 92       	push	r2
    1fac:	3f 92       	push	r3
    1fae:	4f 92       	push	r4
    1fb0:	5f 92       	push	r5
    1fb2:	6f 92       	push	r6
    1fb4:	7f 92       	push	r7
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	ca 1b       	sub	r28, r26
    1fd4:	db 0b       	sbc	r29, r27
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	09 94       	ijmp

00001fe2 <__epilogue_restores__>:
    1fe2:	2a 88       	ldd	r2, Y+18	; 0x12
    1fe4:	39 88       	ldd	r3, Y+17	; 0x11
    1fe6:	48 88       	ldd	r4, Y+16	; 0x10
    1fe8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fea:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fec:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fee:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ff0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ff2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ff4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff8:	df 80       	ldd	r13, Y+7	; 0x07
    1ffa:	ee 80       	ldd	r14, Y+6	; 0x06
    1ffc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffe:	0c 81       	ldd	r16, Y+4	; 0x04
    2000:	1b 81       	ldd	r17, Y+3	; 0x03
    2002:	aa 81       	ldd	r26, Y+2	; 0x02
    2004:	b9 81       	ldd	r27, Y+1	; 0x01
    2006:	ce 0f       	add	r28, r30
    2008:	d1 1d       	adc	r29, r1
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	ed 01       	movw	r28, r26
    2016:	08 95       	ret

00002018 <do_rand>:
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e1 e1       	ldi	r30, 0x11	; 17
    201e:	f0 e1       	ldi	r31, 0x10	; 16
    2020:	cc cf       	rjmp	.-104    	; 0x1fba <__prologue_saves__+0x10>
    2022:	ec 01       	movw	r28, r24
    2024:	a8 80       	ld	r10, Y
    2026:	b9 80       	ldd	r11, Y+1	; 0x01
    2028:	ca 80       	ldd	r12, Y+2	; 0x02
    202a:	db 80       	ldd	r13, Y+3	; 0x03
    202c:	a1 14       	cp	r10, r1
    202e:	b1 04       	cpc	r11, r1
    2030:	c1 04       	cpc	r12, r1
    2032:	d1 04       	cpc	r13, r1
    2034:	41 f4       	brne	.+16     	; 0x2046 <do_rand+0x2e>
    2036:	84 e2       	ldi	r24, 0x24	; 36
    2038:	a8 2e       	mov	r10, r24
    203a:	89 ed       	ldi	r24, 0xD9	; 217
    203c:	b8 2e       	mov	r11, r24
    203e:	8b e5       	ldi	r24, 0x5B	; 91
    2040:	c8 2e       	mov	r12, r24
    2042:	87 e0       	ldi	r24, 0x07	; 7
    2044:	d8 2e       	mov	r13, r24
    2046:	c6 01       	movw	r24, r12
    2048:	b5 01       	movw	r22, r10
    204a:	2d e1       	ldi	r18, 0x1D	; 29
    204c:	33 ef       	ldi	r19, 0xF3	; 243
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	58 d0       	rcall	.+176    	; 0x2104 <__divmodsi4>
    2054:	27 ea       	ldi	r18, 0xA7	; 167
    2056:	31 e4       	ldi	r19, 0x41	; 65
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	34 d0       	rcall	.+104    	; 0x20c6 <__mulsi3>
    205e:	7b 01       	movw	r14, r22
    2060:	8c 01       	movw	r16, r24
    2062:	c6 01       	movw	r24, r12
    2064:	b5 01       	movw	r22, r10
    2066:	2d e1       	ldi	r18, 0x1D	; 29
    2068:	33 ef       	ldi	r19, 0xF3	; 243
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	4a d0       	rcall	.+148    	; 0x2104 <__divmodsi4>
    2070:	ca 01       	movw	r24, r20
    2072:	b9 01       	movw	r22, r18
    2074:	2c ee       	ldi	r18, 0xEC	; 236
    2076:	34 ef       	ldi	r19, 0xF4	; 244
    2078:	4f ef       	ldi	r20, 0xFF	; 255
    207a:	5f ef       	ldi	r21, 0xFF	; 255
    207c:	24 d0       	rcall	.+72     	; 0x20c6 <__mulsi3>
    207e:	6e 0d       	add	r22, r14
    2080:	7f 1d       	adc	r23, r15
    2082:	80 1f       	adc	r24, r16
    2084:	91 1f       	adc	r25, r17
    2086:	97 ff       	sbrs	r25, 7
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <do_rand+0x7a>
    208a:	61 50       	subi	r22, 0x01	; 1
    208c:	70 40       	sbci	r23, 0x00	; 0
    208e:	80 40       	sbci	r24, 0x00	; 0
    2090:	90 48       	sbci	r25, 0x80	; 128
    2092:	68 83       	st	Y, r22
    2094:	79 83       	std	Y+1, r23	; 0x01
    2096:	8a 83       	std	Y+2, r24	; 0x02
    2098:	9b 83       	std	Y+3, r25	; 0x03
    209a:	9b 01       	movw	r18, r22
    209c:	3f 77       	andi	r19, 0x7F	; 127
    209e:	c9 01       	movw	r24, r18
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	ea e0       	ldi	r30, 0x0A	; 10
    20a6:	a5 cf       	rjmp	.-182    	; 0x1ff2 <__epilogue_restores__+0x10>

000020a8 <rand_r>:
    20a8:	b7 cf       	rjmp	.-146    	; 0x2018 <do_rand>

000020aa <rand>:
    20aa:	8c eb       	ldi	r24, 0xBC	; 188
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	b4 cf       	rjmp	.-152    	; 0x2018 <do_rand>

000020b0 <srand>:
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	80 93 bc 01 	sts	0x01BC, r24
    20b8:	90 93 bd 01 	sts	0x01BD, r25
    20bc:	a0 93 be 01 	sts	0x01BE, r26
    20c0:	b0 93 bf 01 	sts	0x01BF, r27
    20c4:	08 95       	ret

000020c6 <__mulsi3>:
    20c6:	62 9f       	mul	r22, r18
    20c8:	d0 01       	movw	r26, r0
    20ca:	73 9f       	mul	r23, r19
    20cc:	f0 01       	movw	r30, r0
    20ce:	82 9f       	mul	r24, r18
    20d0:	e0 0d       	add	r30, r0
    20d2:	f1 1d       	adc	r31, r1
    20d4:	64 9f       	mul	r22, r20
    20d6:	e0 0d       	add	r30, r0
    20d8:	f1 1d       	adc	r31, r1
    20da:	92 9f       	mul	r25, r18
    20dc:	f0 0d       	add	r31, r0
    20de:	83 9f       	mul	r24, r19
    20e0:	f0 0d       	add	r31, r0
    20e2:	74 9f       	mul	r23, r20
    20e4:	f0 0d       	add	r31, r0
    20e6:	65 9f       	mul	r22, r21
    20e8:	f0 0d       	add	r31, r0
    20ea:	99 27       	eor	r25, r25
    20ec:	72 9f       	mul	r23, r18
    20ee:	b0 0d       	add	r27, r0
    20f0:	e1 1d       	adc	r30, r1
    20f2:	f9 1f       	adc	r31, r25
    20f4:	63 9f       	mul	r22, r19
    20f6:	b0 0d       	add	r27, r0
    20f8:	e1 1d       	adc	r30, r1
    20fa:	f9 1f       	adc	r31, r25
    20fc:	bd 01       	movw	r22, r26
    20fe:	cf 01       	movw	r24, r30
    2100:	11 24       	eor	r1, r1
    2102:	08 95       	ret

00002104 <__divmodsi4>:
    2104:	97 fb       	bst	r25, 7
    2106:	09 2e       	mov	r0, r25
    2108:	05 26       	eor	r0, r21
    210a:	0e d0       	rcall	.+28     	; 0x2128 <__divmodsi4_neg1>
    210c:	57 fd       	sbrc	r21, 7
    210e:	04 d0       	rcall	.+8      	; 0x2118 <__divmodsi4_neg2>
    2110:	14 d0       	rcall	.+40     	; 0x213a <__udivmodsi4>
    2112:	0a d0       	rcall	.+20     	; 0x2128 <__divmodsi4_neg1>
    2114:	00 1c       	adc	r0, r0
    2116:	38 f4       	brcc	.+14     	; 0x2126 <__divmodsi4_exit>

00002118 <__divmodsi4_neg2>:
    2118:	50 95       	com	r21
    211a:	40 95       	com	r20
    211c:	30 95       	com	r19
    211e:	21 95       	neg	r18
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	4f 4f       	sbci	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255

00002126 <__divmodsi4_exit>:
    2126:	08 95       	ret

00002128 <__divmodsi4_neg1>:
    2128:	f6 f7       	brtc	.-4      	; 0x2126 <__divmodsi4_exit>
    212a:	90 95       	com	r25
    212c:	80 95       	com	r24
    212e:	70 95       	com	r23
    2130:	61 95       	neg	r22
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	8f 4f       	sbci	r24, 0xFF	; 255
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	08 95       	ret

0000213a <__udivmodsi4>:
    213a:	a1 e2       	ldi	r26, 0x21	; 33
    213c:	1a 2e       	mov	r1, r26
    213e:	aa 1b       	sub	r26, r26
    2140:	bb 1b       	sub	r27, r27
    2142:	fd 01       	movw	r30, r26
    2144:	0d c0       	rjmp	.+26     	; 0x2160 <__udivmodsi4_ep>

00002146 <__udivmodsi4_loop>:
    2146:	aa 1f       	adc	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	ee 1f       	adc	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	a2 17       	cp	r26, r18
    2150:	b3 07       	cpc	r27, r19
    2152:	e4 07       	cpc	r30, r20
    2154:	f5 07       	cpc	r31, r21
    2156:	20 f0       	brcs	.+8      	; 0x2160 <__udivmodsi4_ep>
    2158:	a2 1b       	sub	r26, r18
    215a:	b3 0b       	sbc	r27, r19
    215c:	e4 0b       	sbc	r30, r20
    215e:	f5 0b       	sbc	r31, r21

00002160 <__udivmodsi4_ep>:
    2160:	66 1f       	adc	r22, r22
    2162:	77 1f       	adc	r23, r23
    2164:	88 1f       	adc	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	1a 94       	dec	r1
    216a:	69 f7       	brne	.-38     	; 0x2146 <__udivmodsi4_loop>
    216c:	60 95       	com	r22
    216e:	70 95       	com	r23
    2170:	80 95       	com	r24
    2172:	90 95       	com	r25
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
    2178:	bd 01       	movw	r22, r26
    217a:	cf 01       	movw	r24, r30
    217c:	08 95       	ret

0000217e <_exit>:
    217e:	f8 94       	cli

00002180 <__stop_program>:
    2180:	ff cf       	rjmp	.-2      	; 0x2180 <__stop_program>
